name: 🚀 Deploy Ferraco CRM - Full Stack

# Deploy automático do Ferraco CRM (Container Único - Frontend + Backend + Nginx)

concurrency:
  group: ferraco-deploy-vps
  cancel-in-progress: true

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  VPS_HOST: '72.60.10.108'
  VPS_USER: 'root'
  APP_DIR: '/root/ferraco-crm'
  APP_PORT: '3050'
  COMPOSE_PROJECT: 'ferraco'
  DOMAIN: 'metalurgicaferraco.com'

jobs:
  deploy:
    name: 🚀 Deploy Full Stack para VPS
    runs-on: ubuntu-latest
    timeout-minutes: 40

    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4

    - name: 🔑 Setup SSH Tools
      run: |
        echo "🔑 Instalando ferramentas SSH..."
        sudo apt-get update -q
        sudo apt-get install -y sshpass
        echo "✅ Ferramentas SSH instaladas"

    - name: 🔐 Validate Secrets
      run: |
        echo "🔐 Validando secrets obrigatórios..."

        # Validar VPS_PASSWORD (obrigatório)
        if [ -z "${{ secrets.VPS_PASSWORD }}" ]; then
          echo "❌ ERRO: VPS_PASSWORD não configurado!"
          echo "Configure em: Settings > Secrets and variables > Actions"
          exit 1
        fi
        echo "✅ VPS_PASSWORD configurado"

        # DATABASE_URL é opcional (pode ser configurado direto na VPS)
        if [ -n "${{ secrets.DATABASE_URL }}" ]; then
          echo "✅ DATABASE_URL configurado (será usado no build)"
        else
          echo "⚠️  DATABASE_URL não configurado (use .env na VPS ou configure o secret)"
        fi

        echo "✅ Validação de secrets concluída!"

    - name: 🔍 Pre-Deploy Validation
      run: |
        echo "🔍 Validando estrutura do projeto FERRACO CRM..."
        echo "📋 Arquitetura: Monorepo (apps/backend + apps/frontend)"
        echo ""
        echo "📦 Arquivos Docker essenciais:"
        ls -la Dockerfile docker-compose.vps.yml || { echo "❌ Docker files faltando!"; exit 1; }
        ls -la docker/nginx.conf docker/startup.sh || { echo "❌ Nginx/startup faltando!"; exit 1; }
        echo ""
        echo "📋 Backend (apps/backend/):"
        ls -la apps/backend/package.json apps/backend/src/ apps/backend/prisma/ || { echo "❌ Backend incompleto!"; exit 1; }
        echo ""
        echo "📋 Frontend (apps/frontend/):"
        ls -la apps/frontend/package.json apps/frontend/src/ apps/frontend/vite.config.ts || { echo "❌ Frontend incompleto!"; exit 1; }
        echo ""
        echo "✅ Estrutura monorepo validada!"

    - name: 📦 Prepare Deployment Package
      run: |
        echo "📦 Preparando pacote FERRACO CRM FULL STACK..."
        echo "  📦 Commit: ${{ github.sha }}"
        echo "  🌿 Branch: ${{ github.ref_name }}"
        echo "  👤 Actor: ${{ github.actor }}"
        echo "  🕐 Timestamp: $(date -u)"
        echo ""

        # Criar pacote compacto
        tar --warning=no-file-changed -czf deploy.tar.gz \
          --exclude='.git' \
          --exclude='**/node_modules' \
          --exclude='**/dist' \
          --exclude='**/build' \
          --exclude='*.log' \
          --exclude='coverage' \
          --exclude='.env.local' \
          --exclude='.env' \
          --exclude='**/.DS_Store' \
          --exclude='**/Thumbs.db' \
          . || true

        echo ""
        echo "📊 Tamanho do pacote:"
        ls -lh deploy.tar.gz
        echo "✅ Pacote criado com sucesso!"

    - name: 📤 Upload to VPS
      run: |
        echo "📤 Enviando pacote para VPS..."
        sshpass -p '${{ secrets.VPS_PASSWORD }}' scp \
          -o StrictHostKeyChecking=no \
          -o UserKnownHostsFile=/dev/null \
          -o ConnectTimeout=30 \
          deploy.tar.gz ${{ env.VPS_USER }}@${{ env.VPS_HOST }}:/tmp/
        echo "✅ Upload concluído!"

    - name: 🚀 Deploy on VPS
      run: |
        echo "🚀 Iniciando deploy na VPS..."

        sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh \
          -o StrictHostKeyChecking=no \
          -o UserKnownHostsFile=/dev/null \
          -o ServerAliveInterval=30 \
          -o ServerAliveCountMax=3 \
          -o ConnectTimeout=30 \
          ${{ env.VPS_USER }}@${{ env.VPS_HOST }} << "DEPLOY_SCRIPT"
          set -e

          echo "========================================="
          echo "🚀 FERRACO CRM - Deploy Full Stack"
          echo "========================================="
          echo "📦 Commit: ${{ github.sha }}"
          echo "🌿 Branch: ${{ github.ref_name }}"
          echo "👤 Actor: ${{ github.actor }}"
          echo "🕐 Timestamp: $(date)"
          echo "🎯 Arquitetura: Monorepo - Container Único"
          echo "🐳 Porta VPS: ${{ env.APP_PORT }}"
          echo "========================================="
          echo ""

          # Configurar sistema
          echo "📦 Atualizando sistema..."
          export DEBIAN_FRONTEND=noninteractive

          # Aguardar locks do apt e atualizar
          echo "Aguardando locks do apt..."
          while fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1 || \
                fuser /var/lib/apt/lists/lock >/dev/null 2>&1 || \
                fuser /var/lib/dpkg/lock >/dev/null 2>&1; do
            echo "  Apt está em uso, aguardando..."
            sleep 3
          done

          echo "Atualizando repositórios..."
          apt-get update -qq || true

          echo "Instalando dependências..."
          apt-get install -y curl wget ca-certificates lsb-release psmisc >/dev/null 2>&1 || true

          echo "✅ Sistema atualizado"

          # Instalar/Atualizar Docker
          echo "🐳 Configurando Docker..."
          if ! command -v docker &> /dev/null; then
            echo "Instalando Docker..."
            curl -fsSL https://get.docker.com -o get-docker.sh
            sh get-docker.sh >/dev/null 2>&1
            rm get-docker.sh
            systemctl start docker
            systemctl enable docker
          fi
          docker --version

          # Verificar Docker Compose v2
          if ! docker compose version &> /dev/null; then
            echo "Instalando Docker Compose v2..."
            apt-get update -qq
            apt-get install -y docker-compose-plugin >/dev/null 2>&1
          fi
          docker compose version

          # Parar containers anteriores (SEM remover volumes - preserva banco de dados!)
          echo "⏹️  Parando containers anteriores..."
          cd ${{ env.APP_DIR }} 2>/dev/null || true
          docker compose -f docker-compose.vps.yml -p ${{ env.COMPOSE_PROJECT }} down --remove-orphans 2>/dev/null || true
          echo "✅ Volumes preservados (banco de dados mantido)"

          # Remover containers se ainda existirem
          docker rm -f ferraco-crm-vps 2>/dev/null || true
          docker rm -f ferraco-postgres 2>/dev/null || true

          # Liberar porta
          echo "🔓 Liberando porta ${{ env.APP_PORT }}..."
          fuser -k ${{ env.APP_PORT }}/tcp 2>/dev/null || true
          sleep 2

          # Limpar TUDO do Docker relacionado ao Ferraco (REBUILD COMPLETO ZERO)
          echo "🧹 Limpando COMPLETAMENTE Docker para rebuild zero..."

          # Remover imagens do Ferraco (todas as tags e layers)
          docker images --filter "reference=*ferraco*" -q | xargs -r docker rmi -f 2>/dev/null || true
          docker images | grep ferraco | awk '{print $3}' | xargs -r docker rmi -f 2>/dev/null || true

          # Limpar cache de build (layers intermediárias) - AGRESSIVO
          docker builder prune -a -f 2>/dev/null || true

          # Limpar volumes órfãos
          docker volume prune -f 2>/dev/null || true

          # Limpar networks órfãs
          docker network prune -f 2>/dev/null || true

          # Limpeza geral de sistema - AGRESSIVA (remove tudo não usado)
          docker system prune -a -f 2>/dev/null || true

          echo "✅ Limpeza completa finalizada - garantindo rebuild 100% zero cache"

          # Backup e preparação
          if [ -d "${{ env.APP_DIR }}" ]; then
            echo "💾 Fazendo backup..."
            BACKUP_DIR="${{ env.APP_DIR }}.backup.$(date +%Y%m%d-%H%M%S)"
            mv ${{ env.APP_DIR }} $BACKUP_DIR 2>/dev/null || true
            # Manter apenas últimos 3 backups
            ls -dt ${{ env.APP_DIR }}.backup.* 2>/dev/null | tail -n +4 | xargs -r rm -rf
          fi

          # Extrair código
          echo "📁 Extraindo aplicação..."
          mkdir -p ${{ env.APP_DIR }}
          cd ${{ env.APP_DIR }}
          tar -xzf /tmp/deploy.tar.gz
          rm -f /tmp/deploy.tar.gz

          # Validar estrutura monorepo
          echo "🔍 Validando estrutura monorepo..."
          [ -f "Dockerfile" ] || { echo "❌ Dockerfile não encontrado!"; exit 1; }
          [ -f "docker-compose.vps.yml" ] || { echo "❌ docker-compose.vps.yml não encontrado!"; exit 1; }
          [ -d "docker" ] || { echo "❌ Pasta docker/ não encontrada!"; exit 1; }
          [ -f "docker/startup.sh" ] || { echo "❌ docker/startup.sh não encontrado!"; exit 1; }
          [ -f "docker/nginx.conf" ] || { echo "❌ docker/nginx.conf não encontrado!"; exit 1; }
          [ -d "apps/backend" ] || { echo "❌ Backend (apps/backend) não encontrado!"; exit 1; }
          [ -d "apps/frontend" ] || { echo "❌ Frontend (apps/frontend) não encontrado!"; exit 1; }
          [ -f "apps/backend/package.json" ] || { echo "❌ apps/backend/package.json não encontrado!"; exit 1; }
          [ -f "apps/frontend/package.json" ] || { echo "❌ apps/frontend/package.json não encontrado!"; exit 1; }
          [ -d "apps/backend/prisma" ] || { echo "❌ apps/backend/prisma não encontrado!"; exit 1; }

          # Corrigir permissões dos scripts
          echo "🔧 Corrigindo permissões dos scripts..."
          chmod +x docker/startup.sh 2>/dev/null || true

          echo "✅ Estrutura monorepo validada!"

          # Criar diretórios persistentes (volumes Docker usarão esses diretórios)
          echo "🗄️  Criando diretórios persistentes para volumes Docker..."
          mkdir -p data/ferraco-data data/ferraco-logs
          chmod 777 data/ferraco-data data/ferraco-logs

          # Configurar variáveis de ambiente para Docker
          echo "⚙️  Configurando ambiente Docker..."
          export BUILD_TIMESTAMP=$(date +%s)
          export JWT_SECRET="ferraco-vps-jwt-${{ github.sha }}"
          export CORS_ORIGIN="https://${{ env.DOMAIN }},http://${{ env.VPS_HOST }}:${{ env.APP_PORT }}"
          export ALLOWED_ORIGINS="https://${{ env.DOMAIN }},http://${{ env.VPS_HOST }}:${{ env.APP_PORT }}"
          export LOG_LEVEL=info
          export NODE_ENV=production

          # DATABASE_URL (do secret ou do .env na VPS)
          if [ -n "${{ secrets.DATABASE_URL }}" ]; then
            export DATABASE_URL="${{ secrets.DATABASE_URL }}"
            echo "✅ Usando DATABASE_URL do GitHub Secret"
          else
            echo "⚠️  DATABASE_URL não definido - aplicação usará .env na VPS"
          fi

          # Build da imagem
          echo "🏗️  Building imagem Docker (isso pode levar alguns minutos)..."
          if [ -n "${{ secrets.DATABASE_URL }}" ]; then
            DOCKER_BUILDKIT=1 docker compose -f docker-compose.vps.yml -p ${{ env.COMPOSE_PROJECT }} build \
              --no-cache \
              --pull \
              --build-arg BUILD_TIMESTAMP=$BUILD_TIMESTAMP \
              --build-arg DATABASE_URL="${{ secrets.DATABASE_URL }}"
          else
            DOCKER_BUILDKIT=1 docker compose -f docker-compose.vps.yml -p ${{ env.COMPOSE_PROJECT }} build \
              --no-cache \
              --pull \
              --build-arg BUILD_TIMESTAMP=$BUILD_TIMESTAMP
          fi

          # Iniciar aplicação
          echo "🚀 Iniciando aplicação..."
          docker compose -f docker-compose.vps.yml -p ${{ env.COMPOSE_PROJECT }} up -d

          # Aguardar container iniciar
          echo "⏳ Aguardando container iniciar (30 segundos)..."
          sleep 30

          # Mostrar logs iniciais
          echo "📋 Logs iniciais do container:"
          docker compose -f docker-compose.vps.yml -p ${{ env.COMPOSE_PROJECT }} logs --tail 30

          # Aguardar serviços internos (Nginx + Backend)
          echo "⏳ Aguardando serviços internos (60 segundos)..."
          sleep 60

          # Verificar containers
          echo "🔍 Verificando containers..."
          docker compose -f docker-compose.vps.yml -p ${{ env.COMPOSE_PROJECT }} ps

          # Health check - USAR 127.0.0.1 NO ALPINE (localhost não funciona)
          echo "🩺 Executando health checks..."
          echo "⚠️  Usando 127.0.0.1 (Alpine Linux não resolve 'localhost')"
          echo "ℹ️  Backend serve /health (não /api/health)"

          MAX_TRIES=20
          HEALTH_OK=false

          echo ""
          echo "🔍 Health check da aplicação..."
          for i in $(seq 1 $MAX_TRIES); do
            if curl -f -s http://127.0.0.1:${{ env.APP_PORT }}/health >/dev/null 2>&1; then
              RESPONSE=$(curl -s http://127.0.0.1:${{ env.APP_PORT }}/health)
              echo "✅ Health check OK!"
              echo "   Response: $RESPONSE"
              HEALTH_OK=true
              break
            fi
            echo "  Tentativa $i/$MAX_TRIES - aguardando..."
            sleep 5
          done

          # Verificação final
          echo ""
          echo "========================================="
          if [ "$HEALTH_OK" = true ]; then
            echo "✅ DEPLOY CONCLUÍDO COM SUCESSO!"
          else
            echo "❌ FALHA NO DEPLOY - Health check não passou!"
          fi
          echo "========================================="

          # Validar container Docker
          echo ""
          echo "🔍 Validando container Docker..."
          CONTAINER_COUNT=$(docker ps --filter "name=ferraco-crm-vps" --format "{{.Names}}" | wc -l)
          if [ "$CONTAINER_COUNT" -eq "1" ]; then
            echo "✅ Container ferraco-crm-vps rodando"

            # Mostrar informações do container
            echo ""
            echo "📦 Status do Container:"
            docker ps --filter "name=ferraco-crm-vps" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

            # Mostrar logs completos se health check falhou
            if [ "$HEALTH_OK" != true ]; then
              echo ""
              echo "📋 Logs completos do container (últimas 100 linhas):"
              docker compose -f docker-compose.vps.yml -p ${{ env.COMPOSE_PROJECT }} logs --tail 100
            fi
          else
            echo "❌ ERRO: Container não encontrado ou múltiplos containers!"
            echo "Containers ativos:"
            docker ps
          fi

          # Verificar processos PM2 (não deveria ter)
          if command -v pm2 &> /dev/null; then
            PM2_COUNT=$(pm2 list 2>/dev/null | grep -c "ferraco" || true)
            if [ "$PM2_COUNT" -eq "0" ]; then
              echo "✅ Nenhum processo PM2 do Ferraco (isolamento correto)"
            else
              echo "⚠️  AVISO: Existem $PM2_COUNT processos PM2 do Ferraco"
              echo "   Isso pode interferir com o Docker!"
              pm2 list
            fi
          fi

          echo ""
          echo "🔗 Links de Acesso:"
          echo "  🌐 Aplicação: http://${{ env.VPS_HOST }}:${{ env.APP_PORT }}"
          echo "  🔌 Backend API: http://${{ env.VPS_HOST }}:${{ env.APP_PORT }}/api"
          echo "  🩺 Health: http://${{ env.VPS_HOST }}:${{ env.APP_PORT }}/health"
          echo "  👨‍💼 Admin: http://${{ env.VPS_HOST }}:${{ env.APP_PORT }}/admin"
          echo "========================================="

          # Falhar se health check não passou
          if [ "$HEALTH_OK" != true ]; then
            echo ""
            echo "❌ Deploy falhou - health check não passou!"
            exit 1
          fi
        DEPLOY_SCRIPT

    - name: 🎉 Deploy Success
      run: |
        echo ""
        echo "========================================="
        echo "🎉 FERRACO CRM DEPLOYADO COM SUCESSO!"
        echo "========================================="
        echo ""
        echo "📦 Informações do Deploy:"
        echo "  🏷️  Versão: 2.0.0"
        echo "  📦 Commit: ${{ github.sha }}"
        echo "  🌿 Branch: ${{ github.ref_name }}"
        echo "  👤 Autor: ${{ github.actor }}"
        echo "  🕐 Data: $(date)"
        echo ""
        echo "🔗 Links de Acesso:"
        echo "  🌐 Aplicação: http://${{ env.VPS_HOST }}:${{ env.APP_PORT }}"
        echo "  🔌 API: http://${{ env.VPS_HOST }}:${{ env.APP_PORT }}/api"
        echo "  🩺 Health: http://${{ env.VPS_HOST }}:${{ env.APP_PORT }}/health"
        echo "  👨‍💼 Admin: http://${{ env.VPS_HOST }}:${{ env.APP_PORT }}/admin"
        echo ""
        echo "🏗️  Stack Tecnológica:"
        echo "  🎯 Backend: Node.js + Express + Prisma + PostgreSQL"
        echo "  🎨 Frontend: React + Vite + TypeScript + Tailwind"
        echo "  🌐 Proxy: Nginx (Alpine Linux)"
        echo "  🐳 Deploy: Docker (Container Único - Monorepo)"
        echo "  🔐 Auth: JWT + Bcrypt"
        echo ""
        echo "📌 Notas Importantes:"
        echo "  • Arquitetura: Monorepo (apps/backend + apps/frontend)"
        echo "  • Health checks usam 127.0.0.1 (Alpine não resolve localhost)"
        echo "  • Container isolado - sem PM2 no host"
        echo "  • Build completo com --no-cache"
        echo ""
        echo "✅ Sistema pronto para uso!"
        echo "========================================="
