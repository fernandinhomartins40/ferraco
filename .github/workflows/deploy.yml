name: 🚀 Deploy Ferraco CRM - Full Stack

# FORCE CACHE INVALIDATION - Ferraco CRM Backend Phase 4 Complete - 2025-09-17T15:25:00Z

concurrency:
  group: ferraco-deploy-fullstack
  cancel-in-progress: true

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  VPS_HOST: '72.60.10.108'
  VPS_USER: 'root'
  APP_DIR: '/root/ferraco-crm'
  APP_PORT: '3050'  # Porta única da aplicação (nginx proxy)
  COMPOSE_PROJECT: 'ferraco'

jobs:
  deploy:
    name: 🚀 Deploy Full Stack para VPS
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4

    - name: 🔑 Setup SSH Tools
      run: |
        echo "🔑 Instalando ferramentas SSH..."
        sudo apt-get update -q
        sudo apt-get install -y sshpass
        echo "✅ Ferramentas SSH instaladas"

    - name: 🔍 Pre-Deploy Validation
      run: |
        echo "🔍 Validando estrutura do projeto FERRACO CRM FULL STACK..."
        echo "📋 Frontend:"
        ls -la package.json vite.config.ts Dockerfile .env.example || echo "⚠️ Arquivos frontend faltando"
        ls -la src/components/ src/pages/ || echo "⚠️ Estrutura React faltando"
        echo "📋 Backend:"
        ls -la backend/package.json backend/src/app.js backend/Dockerfile || echo "⚠️ Arquivos backend faltando"
        ls -la backend/src/services/ backend/src/controllers/ || echo "⚠️ Estrutura backend Phase 4 faltando"
        ls -la backend/prisma/ || echo "⚠️ Schema Prisma faltando"
        echo "📋 Docker:"
        ls -la docker-compose.yml nginx.conf || echo "⚠️ Arquivos Docker faltando"

    - name: 📦 Prepare Full Stack Package
      run: |
        echo "📦 Preparando pacote FERRACO CRM FULL STACK..."
        echo "Commit: ${{ github.sha }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Backend: Node.js + Express + Prisma + SQLite3"
        echo "Frontend: React + Vite + TypeScript"
        echo "Features: Auth + Audit + Backup + Health + Permissions + Security"

        # Criar arquivo compacto incluindo backend
        tar --warning=no-file-changed -czf deploy.tar.gz \
          --exclude='.git' \
          --exclude='**/node_modules' \
          --exclude='dist' \
          --exclude='build' \
          --exclude='*.log' \
          --exclude='coverage' \
          --exclude='.env.local' \
          --exclude='backend/data' \
          --exclude='backend/uploads' \
          --exclude='backend/logs' \
          --exclude='nginx-logs' \
          --exclude='backups' \
          . || true

        echo "📊 Tamanho do pacote FULL STACK:"
        ls -lh deploy.tar.gz

    - name: 📤 Upload to VPS
      run: |
        echo "📤 Enviando FULL STACK para VPS..."
        sshpass -p '${{ secrets.VPS_PASSWORD }}' scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null deploy.tar.gz ${{ env.VPS_USER }}@${{ env.VPS_HOST }}:/tmp/

    - name: 🚀 Deploy Full Stack on VPS
      run: |
        echo "🏗️ Executando deploy FULL STACK na VPS..."
        echo "📋 Informações do deploy:"
        echo "  📦 Commit: ${{ github.sha }}"
        echo "  🌿 Branch: ${{ github.ref_name }}"
        echo "  👤 Actor: ${{ github.actor }}"
        echo "  🕐 Timestamp: $(date -u)"
        echo "  🎯 Stack: Node.js Backend + React Frontend"

        sshpass -p '${{ secrets.VPS_PASSWORD }}' ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ServerAliveInterval=30 -o ServerAliveCountMax=3 -o ConnectTimeout=10 ${{ env.VPS_USER }}@${{ env.VPS_HOST }} << DEPLOY_SCRIPT
          set -e

          echo '🚀 Iniciando deploy FERRACO CRM FULL STACK - Node.js + React'

          # Configurar sistema
          echo '📦 Configurando VPS...'
          export DEBIAN_FRONTEND=noninteractive
          apt-get update -y
          apt-get install -y curl wget gnupg2 software-properties-common apt-transport-https ca-certificates lsb-release

          # Parar stack anterior (se existir)
          echo '⏹️ Parando stack anterior...'
          if command -v docker &> /dev/null; then
            # Parar todos os containers do projeto Ferraco
            docker compose -p ${{ env.COMPOSE_PROJECT }} down --volumes --remove-orphans 2>/dev/null || true
            docker compose -p ferraco down --volumes --remove-orphans 2>/dev/null || true

            # Parar containers específicos se ainda estiverem rodando
            docker stop ferraco-backend ferraco-frontend ferraco-proxy 2>/dev/null || true
            docker rm -f ferraco-backend ferraco-frontend ferraco-proxy 2>/dev/null || true

            # Remover APENAS as imagens do Ferraco (específicas)
            echo '🗑️ Removendo imagens antigas do Ferraco...'
            docker images --format "table {{.Repository}}:{{.Tag}}\t{{.ID}}" | grep -E "ferraco" | awk '{print $2}' | xargs -r docker rmi -f 2>/dev/null || true

            # Remover apenas imagens do compose project ferraco
            docker images --format "table {{.Repository}}:{{.Tag}}\t{{.ID}}" | grep -E "ferraco-crm" | awk '{print $2}' | xargs -r docker rmi -f 2>/dev/null || true

            # Liberar porta da aplicação forçadamente
            docker ps --filter "publish=${{ env.APP_PORT }}" --format "table {{.ID}}" | tail -n +2 | xargs -r docker stop 2>/dev/null || true

            # Remover apenas volumes específicos do ferraco
            docker volume ls --format "table {{.Name}}" | grep -E "ferraco" | xargs -r docker volume rm 2>/dev/null || true

            echo '✅ Stack anterior parada, imagens antigas removidas e portas liberadas'
          fi

          # Instalar/Atualizar Docker
          echo '🐳 Configurando Docker + Compose...'
          if ! command -v docker &> /dev/null; then
            # Instalar Docker
            apt-get remove -y docker docker-engine docker.io containerd runc 2>/dev/null || true
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
            echo "deb [arch=\$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \$(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
            apt-get update -y
            apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
            systemctl start docker && systemctl enable docker
          fi
          docker --version && docker compose version

          # Backup e preparação
          if [ -d '${{ env.APP_DIR }}' ]; then
            echo '💾 Fazendo backup...'
            mv '${{ env.APP_DIR }}' '${{ env.APP_DIR }}.backup.\$(date +%Y%m%d-%H%M%S)' 2>/dev/null || true
          fi

          # Extrair código
          echo '📁 Extraindo FULL STACK...'
          mkdir -p ${{ env.APP_DIR }} && cd ${{ env.APP_DIR }}
          tar -xzf /tmp/deploy.tar.gz && rm -f /tmp/deploy.tar.gz

          # Validar estrutura
          echo '🔍 Validando estrutura FERRACO CRM FULL STACK...'
          ls -la docker-compose.yml nginx.conf || { echo '❌ Arquivos essenciais faltando!'; exit 1; }
          ls -la Dockerfile backend/Dockerfile || { echo '❌ Dockerfiles faltando!'; exit 1; }
          ls -la backend/package.json backend/src/app.js || { echo '❌ Backend incompleto!'; exit 1; }
          ls -la backend/src/services/ backend/src/controllers/ || { echo '❌ Estrutura backend Phase 4 faltando!'; exit 1; }
          ls -la backend/prisma/ || { echo '❌ Schema Prisma faltando!'; exit 1; }
          ls -la package.json src/components/ || { echo '❌ Frontend incompleto!'; exit 1; }

          # Configurar variáveis de produção para backend
          echo '⚙️ Configurando ambiente de produção para backend...'
          echo \"NODE_ENV=production\" > backend/.env.production
          echo \"PORT=3000\" >> backend/.env.production
          echo \"DATABASE_URL=file:./data/ferraco.db\" >> backend/.env.production
          echo \"JWT_SECRET=ferraco-production-jwt-${{ github.sha }}\" >> backend/.env.production
          echo \"CORS_ORIGIN=http://${{ env.VPS_HOST }}:${{ env.APP_PORT }},http://localhost:3000,http://localhost:5173,http://localhost:8080\" >> backend/.env.production

          # Preparar diretórios de dados
          echo '🗄️ Preparando diretórios de dados...'
          mkdir -p backend/data backend/uploads backend/logs
          echo '✅ Diretórios criados!'

          # Deploy com Docker Compose
          echo '🐳 Executando deploy com Docker Compose...'
          export FRONTEND_PORT=${{ env.APP_PORT }}
          export VITE_API_URL=http://${{ env.VPS_HOST }}:${{ env.APP_PORT }}/api
          export BUILD_TIMESTAMP=\$(date +%s)
          export JWT_SECRET=ferraco-production-jwt-${{ github.sha }}

          # Verificar se porta está realmente livre
          echo '🔍 Verificando porta antes do deploy...'
          if netstat -tuln | grep -q ":${{ env.APP_PORT }} "; then
            echo "⚠️ Porta ${{ env.APP_PORT }} ainda ocupada, forçando liberação..."
            fuser -k ${{ env.APP_PORT }}/tcp 2>/dev/null || true
            sleep 2
          fi

          # Build e start dos serviços com invalidação forçada de cache
          echo '🏗️ Building imagens com invalidação total de cache...'

          # Remover APENAS imagens do ferraco (sem afetar outras aplicações)
          echo '🧹 Limpeza final de imagens do Ferraco antes do build...'
          docker images --format "table {{.Repository}}:{{.Tag}}\t{{.ID}}" | grep -E "ferraco" | awk '{print $2}' | xargs -r docker rmi -f 2>/dev/null || true
          docker images --format "table {{.Repository}}:{{.Tag}}\t{{.ID}}" | grep -E "ferraco-crm" | awk '{print $2}' | xargs -r docker rmi -f 2>/dev/null || true

          # Build com cache totalmente limpo e timestamp único
          echo '🔨 Construindo imagens completamente novas...'
          BUILD_TIMESTAMP=\$(date +%s)
          DOCKER_BUILDKIT=1 docker compose -p ${{ env.COMPOSE_PROJECT }} build --no-cache --pull --build-arg BUILD_TIMESTAMP=\$BUILD_TIMESTAMP

          echo '🚀 Iniciando containers...'

          # Tentar start normal primeiro
          if ! docker compose -p ${{ env.COMPOSE_PROJECT }} up -d; then
            echo '⚠️ Falha no start normal, tentando restart forçado...'

            # Restart específico do ferraco apenas
            docker compose -p ${{ env.COMPOSE_PROJECT }} down --volumes --remove-orphans 2>/dev/null || true
            echo '⚠️ Reiniciando apenas containers do Ferraco CRM...'

            # Aguardar um pouco
            sleep 10

            # Tentar novamente
            echo '🔄 Tentativa 2: Iniciando containers...'
            docker compose -p ${{ env.COMPOSE_PROJECT }} up -d
          fi

          # Aguardar inicialização
          echo '⏳ Aguardando stack inicializar (45s)...'
          sleep 45

          # Verificar serviços
          echo '🔍 Verificando serviços...'
          docker compose -p ${{ env.COMPOSE_PROJECT }} ps

          # Testar aplicação (via nginx proxy)
          echo '🔍 Testando aplicação...'
          for i in {1..10}; do
            if curl -f -s http://localhost:${{ env.APP_PORT }}/health >/dev/null 2>&1; then
              echo '✅ Nginx proxy health check passou!'
              break
            fi
            echo "Nginx proxy - Tentativa \$i/10 - aguardando 5s..."
            sleep 5
          done

          # Testar API backend via proxy
          echo '🔍 Testando API backend via proxy...'
          for i in {1..8}; do
            if curl -f -s http://localhost:${{ env.APP_PORT }}/api/health >/dev/null 2>&1; then
              echo '✅ Backend API health check passou!'
              break
            fi
            echo "Backend API - Tentativa \$i/8 - aguardando 5s..."
            sleep 5
          done

          # Verificação final
          echo '🎯 Verificação final...'
          if curl -f -s http://localhost:${{ env.APP_PORT }}/health >/dev/null 2>&1 && curl -f -s http://localhost:${{ env.APP_PORT }}/api/health >/dev/null 2>&1; then
            echo '✅ DEPLOY FULL STACK CONCLUÍDO COM SUCESSO!'
            echo '🌐 Aplicação: http://${{ env.VPS_HOST }}:${{ env.APP_PORT }}'
            echo '🔌 Backend API: http://${{ env.VPS_HOST }}:${{ env.APP_PORT }}/api'
            echo '🩺 Health: http://${{ env.VPS_HOST }}:${{ env.APP_PORT }}/health'
          else
            echo '❌ Falha na verificação final!'
            docker compose -p ${{ env.COMPOSE_PROJECT }} logs --tail 20
            exit 1
          fi
        DEPLOY_SCRIPT

    - name: 🎉 Full Stack Deploy Success
      run: |
        echo "🎉 FERRACO CRM FULL STACK DEPLOYADO!"
        echo "✅ Backend Node.js + Express + Prisma + Frontend React em produção"
        echo ""
        echo "🔗 LINKS FUNCIONAIS (ENTRADA ÚNICA):"
        echo "🌐 Aplicação: http://${{ env.VPS_HOST }}:${{ env.APP_PORT }}"
        echo "🔌 Backend API: http://${{ env.VPS_HOST }}:${{ env.APP_PORT }}/api"
        echo "🩺 Health Check: http://${{ env.VPS_HOST }}:${{ env.APP_PORT }}/health"
        echo "👨‍💼 Painel Admin: http://${{ env.VPS_HOST }}:${{ env.APP_PORT }}/admin"
        echo "📊 Dashboard CRM: http://${{ env.VPS_HOST }}:${{ env.APP_PORT }}/admin/dashboard"
        echo ""
        echo "✅ Stack Completa:"
        echo "  🎯 Backend: Node.js + Express + Prisma + SQLite3 + JWT"
        echo "  🎨 Frontend: React + Vite + TypeScript"
        echo "  🐳 Deploy: Docker Compose"
        echo "  👥 Gerenciamento de leads e usuários"
        echo "  🔐 Autenticação e autorização avançada"
        echo "  📊 Sistema de auditoria completo"
        echo "  💾 Backup automático e health checks"
        echo "  🔑 Permissões granulares"
        echo "  🛡️ Middleware de segurança OWASP"
        echo "  📚 Documentação automática da API"