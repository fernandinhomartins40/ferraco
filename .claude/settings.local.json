{
  "permissions": {
    "allow": [
      "Bash(npm run dev:*)",
      "Bash(npm install)",
      "Bash(npm run build:*)",
      "Bash(timeout 30s npm start)",
      "Bash(curl:*)",
      "Bash(powershell:*)",
      "Bash(npm start)",
      "Bash(node:*)",
      "Bash(npm install:*)",
      "Bash(docker-compose up:*)",
      "Bash(tree:*)",
      "Bash(npx prisma generate:*)",
      "Bash(npx prisma:*)",
      "Bash(taskkill:*)",
      "Bash(findstr:*)",
      "Bash(PORT=3001 npm start)",
      "Bash(PORT=3002 npm start)",
      "Bash(netstat:*)",
      "Bash(PORT=3003 npm start)",
      "Bash(PORT=3004 npm start)",
      "Bash(PORT=3005 npm start)",
      "Bash(PORT=3006 npm start)",
      "Bash(npm run:*)",
      "Bash(PORT=3001 node src/app.js)",
      "Bash(git add:*)",
      "Bash(git push:*)",
      "Bash(grep:*)",
      "Bash(timeout 15s npm start)",
      "Bash(timeout 10s npm start)",
      "Bash(git commit:*)",
      "Bash(PORT=3001 npm run dev)",
      "Bash(PORT=3002 npm run dev)",
      "Bash(/bashes)",
      "Bash(timeout:*)",
      "Bash(PORT=3001 node src/app_working.js)",
      "Bash(PORT=3007 node src/app_real_fix.js)",
      "Bash(PORT=3099 node src/app_real_fix.js)",
      "Bash(PORT=3008 timeout 5s node src/app.js)",
      "Bash(PORT=3009 timeout 5s node src/app.js)",
      "Bash(PORT=3009 node src/app.js)",
      "Bash(docker compose build:*)",
      "Bash(PORT=3002 node src/app.js)",
      "Bash(ssh:*)",
      "Bash(PORT=3010 node src/app.js)",
      "Bash(PORT=3011 timeout 10s node src/app.js)",
      "Bash(PORT=3012 node src/app_clean.js)",
      "Bash(git rm:*)",
      "Bash(dir:*)",
      "mcp__ide__getDiagnostics",
      "Bash(find:*)",
      "Bash(awk:*)",
      "Bash(npx tsc:*)",
      "Bash(for file in src/utils/userStorage.ts src/pages/ResetPassword.tsx src/components/FirstLoginSetup.tsx src/components/admin/SecurityDashboard.tsx)",
      "Bash(do echo \"=== $file ===\")",
      "Bash(done)",
      "Bash(cd:*)",
      "Bash(cut:*)",
      "Bash(if [ ! -f package.json ])",
      "Bash(then npm init -y)",
      "Bash(fi)",
      "Bash(if [ ! -d \"node_modules\" ])",
      "Bash([ ! -f \"node_modules/.bin/tsx\" ])",
      "Bash(then echo \"Instalando dependencias...\")",
      "Bash(else echo \"Dependencias ja instaladas\")",
      "Bash(if [ -d \"node_modules\" ])",
      "Bash(then echo \"Frontend com node_modules OK\")",
      "Bash(else echo \"Frontend SEM node_modules - instalando...\")",
      "Bash(then echo \"Dependências já instaladas\")",
      "Bash(else npm install)",
      "Bash(if [ ! -d \"ferraco-backend\\src\\services\" ])",
      "Bash(then mkdir \"ferraco-backend\\src\\services\")",
      "Bash(if [ ! -d \"ferraco-backend\\src\\modules\\chatbot\" ])",
      "Bash(then mkdir -p \"ferraco-backend\\src\\modules\\chatbot\")",
      "Bash(npx tsx:*)",
      "Bash(cat:*)",
      "Bash(if [ -d \"ferraco-backend\" ])",
      "Bash(then ls -la ferraco-backend/)",
      "Bash(PORT=3001 npx tsx src/server.ts)",
      "Bash(while read pid)",
      "Bash(do taskkill //F //PID $pid)",
      "Bash(tasklist)",
      "Bash(ollama pull:*)",
      "Bash(git mv:*)",
      "Bash(git log:*)",
      "Bash(chmod:*)",
      "Bash(git update-index:*)",
      "Bash(git ls-tree:*)",
      "Bash(test:*)",
      "Bash(git check-ignore:*)",
      "Bash(docker build:*)",
      "Bash(scp:*)",
      "Bash(python3:*)",
      "Bash(nslookup:*)",
      "Bash(ping:*)",
      "Bash(git restore:*)",
      "Bash(gh run list:*)",
      "Bash(sqlite3:*)",
      "Bash(python -c \"import yaml; yaml.safe_load(open(''.github/workflows/deploy.yml''))\")",
      "Bash(git show:*)",
      "Bash(npx vite build:*)",
      "Bash(if [ ! -f \"docs/backend/FASE-11-VALIDACOES.md\" ])",
      "Bash(then echo \"File does not exist, creating...\")",
      "Bash(echo \"Para configurar os secrets no GitHub Actions, siga estes passos:\n\n1. Acesse: https://github.com/fernandinhomartins40/ferraco/settings/secrets/actions\n\n2. Clique em ''New repository secret''\n\n3. Configure os seguintes secrets:\n\n   Nome: DATABASE_URL\n   Valor: postgresql://usuario:senha@host:5432/ferraco_crm\n   (Use a URL real do PostgreSQL da sua VPS)\n\n   Nome: VPS_PASSWORD\n   Valor: [senha do root da VPS 72.60.10.108]\n\n4. Após configurar, execute o workflow novamente\")",
      "Bash(rsync:*)",
      "Read(//c/c/**)",
      "Bash(npm test)"
    ],
    "deny": [],
    "ask": []
  }
}