/**
 * WhatsApp Service - Extended Functionalities
 * TODAS as 97 funcionalidades nativas do WPPConnect organizadas por categoria
 */

import type { Whatsapp } from '@wppconnect-team/wppconnect';
import { logger } from '../utils/logger';

export class WhatsAppServiceExtended {
  constructor(private client: Whatsapp) {}

  // ============================================================================
  // üì® MENSAGENS - 27 FUN√á√ïES ADICIONAIS
  // ============================================================================

  /**
   * Enviar localiza√ß√£o
   */
  async sendLocation(to: string, latitude: string, longitude: string, title: string): Promise<any> {
    try {
      const result = await this.client.sendLocation(to, latitude, longitude, title);
      logger.info(`üìç Localiza√ß√£o enviada para ${to}`);
      return result;
    } catch (error: any) {
      logger.error('Erro ao enviar localiza√ß√£o:', error);
      throw error;
    }
  }

  /**
   * Enviar cart√£o de contato (vCard)
   */
  async sendContactVcard(to: string, contactId: string, name?: string): Promise<any> {
    try {
      const result = await this.client.sendContactVcard(to, contactId, name);
      logger.info(`üë§ Contato enviado para ${to}`);
      return result;
    } catch (error: any) {
      logger.error('Erro ao enviar contato:', error);
      throw error;
    }
  }

  /**
   * Enviar lista de contatos (vCard)
   */
  async sendContactVcardList(to: string, contacts: (string | { id: string; name: string })[]): Promise<any> {
    try {
      const result = await this.client.sendContactVcardList(to, contacts);
      logger.info(`üë• Lista de contatos enviada para ${to}`);
      return result;
    } catch (error: any) {
      logger.error('Erro ao enviar lista de contatos:', error);
      throw error;
    }
  }

  /**
   * Enviar v√≠deo como GIF
   */
  async sendVideoAsGif(to: string, filePath: string, filename?: string, caption?: string): Promise<any> {
    try {
      const result = await this.client.sendVideoAsGif(to, filePath, filename, caption);
      logger.info(`üé¨ V√≠deo como GIF enviado para ${to}`);
      return result;
    } catch (error: any) {
      logger.error('Erro ao enviar v√≠deo como GIF:', error);
      throw error;
    }
  }

  /**
   * Enviar v√≠deo como GIF from base64
   */
  async sendVideoAsGifFromBase64(to: string, base64: string, filename: string, caption?: string): Promise<any> {
    try {
      const result = await this.client.sendVideoAsGifFromBase64(to, base64, filename, caption);
      logger.info(`üé¨ V√≠deo como GIF (base64) enviado para ${to}`);
      return result;
    } catch (error: any) {
      logger.error('Erro ao enviar v√≠deo como GIF base64:', error);
      throw error;
    }
  }

  /**
   * Enviar imagem como sticker
   */
  async sendImageAsSticker(to: string, pathOrBase64: string, options?: any): Promise<any> {
    try {
      const result = await this.client.sendImageAsSticker(to, pathOrBase64, options);
      logger.info(`üé® Sticker enviado para ${to}`);
      return result;
    } catch (error: any) {
      logger.error('Erro ao enviar sticker:', error);
      throw error;
    }
  }

  /**
   * Enviar GIF como sticker animado
   */
  async sendImageAsStickerGif(to: string, pathOrBase64: string, options?: any): Promise<any> {
    try {
      const result = await this.client.sendImageAsStickerGif(to, pathOrBase64, options);
      logger.info(`üé® Sticker GIF enviado para ${to}`);
      return result;
    } catch (error: any) {
      logger.error('Erro ao enviar sticker GIF:', error);
      throw error;
    }
  }

  /**
   * Enviar chave PIX (Brasil)
   */
  async sendPixKey(to: string, params: any, options?: any): Promise<any> {
    try {
      const result = await this.client.sendPixKey(to, params, options);
      logger.info(`üí∞ Chave PIX enviada para ${to}`);
      return result;
    } catch (error: any) {
      logger.error('Erro ao enviar PIX:', error);
      throw error;
    }
  }

  /**
   * Enviar PTT (√°udio) from base64
   */
  async sendPttFromBase64(to: string, base64: string, filename: string, caption?: string, quotedMessageId?: string): Promise<any> {
    try {
      const result = await this.client.sendPttFromBase64(to, base64, filename, caption, quotedMessageId);
      logger.info(`üé§ √Åudio PTT (base64) enviado para ${to}`);
      return result;
    } catch (error: any) {
      logger.error('Erro ao enviar PTT base64:', error);
      throw error;
    }
  }

  /**
   * Enviar imagem from base64
   */
  async sendImageFromBase64(to: string, base64: string, filename: string, caption?: string, quotedMessageId?: string): Promise<any> {
    try {
      const result = await this.client.sendImageFromBase64(to, base64, filename, caption, quotedMessageId);
      logger.info(`üñºÔ∏è Imagem (base64) enviada para ${to}`);
      return result;
    } catch (error: any) {
      logger.error('Erro ao enviar imagem base64:', error);
      throw error;
    }
  }

  /**
   * Enviar GIF
   */
  async sendGif(to: string, filePath: string, filename?: string, caption?: string): Promise<any> {
    try {
      const result = await this.client.sendGif(to, filePath, filename, caption);
      logger.info(`üé• GIF enviado para ${to}`);
      return result;
    } catch (error: any) {
      logger.error('Erro ao enviar GIF:', error);
      throw error;
    }
  }

  /**
   * Enviar GIF from base64
   */
  async sendGifFromBase64(to: string, base64: string, filename: string, caption?: string): Promise<any> {
    try {
      const result = await this.client.sendGifFromBase64(to, base64, filename, caption);
      logger.info(`üé• GIF (base64) enviado para ${to}`);
      return result;
    } catch (error: any) {
      logger.error('Erro ao enviar GIF base64:', error);
      throw error;
    }
  }

  /**
   * Responder mensagem (deprecated - use sendText with quotedMsg)
   */
  async reply(to: string, content: string, quotedMsg: string): Promise<any> {
    try {
      const result = await this.client.reply(to, content, quotedMsg);
      logger.info(`‚Ü©Ô∏è Resposta enviada para ${to}`);
      return result;
    } catch (error: any) {
      logger.error('Erro ao responder:', error);
      throw error;
    }
  }

  /**
   * Definir estado do chat (typing/recording)
   */
  async setChatState(chatId: string, state: any): Promise<void> {
    try {
      await this.client.setChatState(chatId, state);
      logger.debug(`üí¨ Estado do chat ${chatId} definido como ${state}`);
    } catch (error: any) {
      logger.error('Erro ao definir estado do chat:', error);
      throw error;
    }
  }

  /**
   * Enviar mensagem com op√ß√µes avan√ßadas
   */
  async sendMessageOptions(chat: any, content: any, options?: any): Promise<any> {
    try {
      const result = await this.client.sendMessageOptions(chat, content, options);
      logger.info(`üìù Mensagem com op√ß√µes enviada`);
      return result;
    } catch (error: any) {
      logger.error('Erro ao enviar mensagem com op√ß√µes:', error);
      throw error;
    }
  }

  /**
   * Download de m√≠dia
   */
  async downloadMedia(messageId: string): Promise<string> {
    try {
      return await this.client.downloadMedia(messageId);
    } catch (error: any) {
      logger.error('Erro ao fazer download de m√≠dia:', error);
      throw error;
    }
  }

  /**
   * Descriptografar arquivo
   */
  async decryptFile(message: any): Promise<Buffer> {
    try {
      return await this.client.decryptFile(message);
    } catch (error: any) {
      logger.error('Erro ao descriptografar arquivo:', error);
      throw error;
    }
  }

  /**
   * Buscar mensagem por ID
   */
  async getMessageById(messageId: string): Promise<any> {
    try {
      return await this.client.getMessageById(messageId);
    } catch (error: any) {
      logger.error('Erro ao buscar mensagem por ID:', error);
      throw error;
    }
  }

  /**
   * Obter rea√ß√µes de uma mensagem
   */
  async getReactions(msgId: string): Promise<any> {
    try {
      return await this.client.getReactions(msgId);
    } catch (error: any) {
      logger.error('Erro ao obter rea√ß√µes:', error);
      throw error;
    }
  }

  /**
   * Obter votos de uma enquete
   */
  async getVotes(msgId: string): Promise<any> {
    try {
      return await this.client.getVotes(msgId);
    } catch (error: any) {
      logger.error('Erro ao obter votos da enquete:', error);
      throw error;
    }
  }

  /**
   * Obter plataforma da mensagem (android/iphone/web)
   */
  async getPlatformFromMessage(msgId: string): Promise<string> {
    try {
      return await this.client.getPlatformFromMessage(msgId);
    } catch (error: any) {
      logger.error('Erro ao obter plataforma da mensagem:', error);
      throw error;
    }
  }

  // ============================================================================
  // üë§ CONTATOS - 10 FUN√á√ïES
  // ============================================================================

  /**
   * Obter todos os contatos
   */
  async getAllContacts(): Promise<any[]> {
    try {
      const contacts = await this.client.getAllContacts();
      logger.info(`üìá ${contacts.length} contatos obtidos`);
      return contacts;
    } catch (error: any) {
      logger.error('Erro ao obter contatos:', error);
      throw error;
    }
  }

  /**
   * Obter chat por ID
   */
  async getChatById(contactId: string): Promise<any> {
    try {
      return await this.client.getChatById(contactId);
    } catch (error: any) {
      logger.error('Erro ao obter chat por ID:', error);
      throw error;
    }
  }

  /**
   * Obter status/bio do contato
   */
  async getStatus(contactId: string): Promise<any> {
    try {
      return await this.client.getStatus(contactId);
    } catch (error: any) {
      logger.error('Erro ao obter status do contato:', error);
      throw error;
    }
  }

  /**
   * Obter foto de perfil do servidor
   */
  async getProfilePicFromServer(chatId: string): Promise<any> {
    try {
      return await this.client.getProfilePicFromServer(chatId);
    } catch (error: any) {
      logger.error('Erro ao obter foto de perfil:', error);
      throw error;
    }
  }

  /**
   * Verificar se contato est√° online
   */
  async getChatIsOnline(chatId: string): Promise<boolean> {
    try {
      return await this.client.getChatIsOnline(chatId);
    } catch (error: any) {
      logger.error('Erro ao verificar se est√° online:', error);
      throw error;
    }
  }

  /**
   * Obter √∫ltimo visto
   */
  async getLastSeen(chatId: string): Promise<number | boolean> {
    try {
      return await this.client.getLastSeen(chatId);
    } catch (error: any) {
      logger.error('Erro ao obter √∫ltimo visto:', error);
      throw error;
    }
  }

  /**
   * Obter lista de bloqueados
   */
  async getBlockList(): Promise<string[]> {
    try {
      return await this.client.getBlockList();
    } catch (error: any) {
      logger.error('Erro ao obter lista de bloqueados:', error);
      throw error;
    }
  }

  /**
   * Obter todas mensagens n√£o lidas
   */
  async getAllUnreadMessages(): Promise<any[]> {
    try {
      return await this.client.getAllUnreadMessages();
    } catch (error: any) {
      logger.error('Erro ao obter mensagens n√£o lidas:', error);
      throw error;
    }
  }

  // ============================================================================
  // üìñ STATUS/STORIES - 4 FUN√á√ïES
  // ============================================================================

  /**
   * Enviar imagem para status
   */
  async sendImageStatus(pathOrBase64: string, options?: any): Promise<void> {
    try {
      await this.client.sendImageStatus(pathOrBase64, options);
      logger.info(`üìñ Imagem postada no status`);
    } catch (error: any) {
      logger.error('Erro ao postar imagem no status:', error);
      throw error;
    }
  }

  /**
   * Enviar v√≠deo para status
   */
  async sendVideoStatus(pathOrBase64: string, options?: any): Promise<void> {
    try {
      await this.client.sendVideoStatus(pathOrBase64, options);
      logger.info(`üìñ V√≠deo postado no status`);
    } catch (error: any) {
      logger.error('Erro ao postar v√≠deo no status:', error);
      throw error;
    }
  }

  /**
   * Enviar texto para status
   */
  async sendTextStatus(text: string, options: { backgroundColor?: string; font?: number }): Promise<void> {
    try {
      await this.client.sendTextStatus(text, options);
      logger.info(`üìñ Texto postado no status`);
    } catch (error: any) {
      logger.error('Erro ao postar texto no status:', error);
      throw error;
    }
  }

  /**
   * Marcar status como lido
   */
  async sendReadStatus(chatId: string, statusId: string): Promise<void> {
    try {
      await this.client.sendReadStatus(chatId, statusId);
      logger.debug(`üëÅÔ∏è Status marcado como lido`);
    } catch (error: any) {
      logger.error('Erro ao marcar status como lido:', error);
      throw error;
    }
  }

  // ============================================================================
  // üõçÔ∏è CAT√ÅLOGO/PRODUTOS (WhatsApp Business) - 8 FUN√á√ïES
  // ============================================================================

  /**
   * Criar produto no cat√°logo
   */
  async createProduct(name: string, image: string, description: string, price: number, isHidden: boolean, url: string, retailerId: string, currency?: string): Promise<any> {
    try {
      const result = await this.client.createProduct(name, image, description, price, isHidden, url, retailerId, currency || 'BRL');
      logger.info(`üõçÔ∏è Produto criado: ${name}`);
      return result;
    } catch (error: any) {
      logger.error('Erro ao criar produto:', error);
      throw error;
    }
  }

  /**
   * Obter produtos do cat√°logo
   */
  async getProducts(id: string, qnt: number = 10): Promise<any[]> {
    try {
      return await this.client.getProducts(id, qnt);
    } catch (error: any) {
      logger.error('Erro ao obter produtos:', error);
      throw error;
    }
  }

  /**
   * Obter produto por ID
   */
  async getProductById(id: string, productId: string): Promise<any> {
    try {
      return await this.client.getProductById(id, productId);
    } catch (error: any) {
      logger.error('Erro ao obter produto por ID:', error);
      throw error;
    }
  }

  /**
   * Editar produto
   */
  async editProduct(productId: string, options: any): Promise<any> {
    try {
      const result = await this.client.editProduct(productId, options);
      logger.info(`‚úèÔ∏è Produto editado: ${productId}`);
      return result;
    } catch (error: any) {
      logger.error('Erro ao editar produto:', error);
      throw error;
    }
  }

  /**
   * Deletar produtos
   */
  async delProducts(productsId: string[]): Promise<any> {
    try {
      const result = await this.client.delProducts(productsId);
      logger.info(`üóëÔ∏è ${productsId.length} produto(s) deletado(s)`);
      return result;
    } catch (error: any) {
      logger.error('Erro ao deletar produtos:', error);
      throw error;
    }
  }

  /**
   * Obter pedido (order)
   */
  async getOrder(msgId: string): Promise<any> {
    try {
      return await this.client.getOrder(msgId);
    } catch (error: any) {
      logger.error('Erro ao obter pedido:', error);
      throw error;
    }
  }

  // ============================================================================
  // üèòÔ∏è COMUNIDADES (WhatsApp Communities) - 6 FUN√á√ïES
  // ============================================================================

  /**
   * Criar comunidade
   */
  async createCommunity(name: string, description: string, groupIds: string[]): Promise<any> {
    try {
      const result = await this.client.createCommunity(name, description, groupIds);
      logger.info(`üèòÔ∏è Comunidade criada: ${name}`);
      return result;
    } catch (error: any) {
      logger.error('Erro ao criar comunidade:', error);
      throw error;
    }
  }

  /**
   * Desativar comunidade
   */
  async deactivateCommunity(communityId: string): Promise<any> {
    try {
      const result = await this.client.deactivateCommunity(communityId);
      logger.info(`üèòÔ∏è Comunidade desativada: ${communityId}`);
      return result;
    } catch (error: any) {
      logger.error('Erro ao desativar comunidade:', error);
      throw error;
    }
  }

  /**
   * Adicionar grupos √† comunidade
   */
  async addSubgroupsCommunity(communityId: string, groupsIds: string[]): Promise<any> {
    try {
      const result = await this.client.addSubgroupsCommunity(communityId, groupsIds);
      logger.info(`üèòÔ∏è ${groupsIds.length} grupo(s) adicionado(s) √† comunidade`);
      return result;
    } catch (error: any) {
      logger.error('Erro ao adicionar grupos √† comunidade:', error);
      throw error;
    }
  }

  /**
   * Remover grupos da comunidade
   */
  async removeSubgroupsCommunity(communityId: string, groupsIds: string[]): Promise<any> {
    try {
      const result = await this.client.removeSubgroupsCommunity(communityId, groupsIds);
      logger.info(`üèòÔ∏è ${groupsIds.length} grupo(s) removido(s) da comunidade`);
      return result;
    } catch (error: any) {
      logger.error('Erro ao remover grupos da comunidade:', error);
      throw error;
    }
  }

  /**
   * Promover participante a admin da comunidade
   */
  async promoteCommunityParticipant(communityId: string, participantId: string | string[]): Promise<any> {
    try {
      const result = await this.client.promoteCommunityParticipant(communityId, participantId);
      logger.info(`üèòÔ∏è Participante promovido a admin da comunidade`);
      return result;
    } catch (error: any) {
      logger.error('Erro ao promover participante da comunidade:', error);
      throw error;
    }
  }

  /**
   * Remover admin de participante da comunidade
   */
  async demoteCommunityParticipant(communityId: string, participantId: string | string[]): Promise<any> {
    try {
      const result = await this.client.demoteCommunityParticipant(communityId, participantId);
      logger.info(`üèòÔ∏è Admin removido de participante da comunidade`);
      return result;
    } catch (error: any) {
      logger.error('Erro ao rebaixar participante da comunidade:', error);
      throw error;
    }
  }

  /**
   * Obter participantes da comunidade
   */
  async getCommunityParticipants(communityId: string): Promise<any> {
    try {
      return await this.client.getCommunityParticipants(communityId);
    } catch (error: any) {
      logger.error('Erro ao obter participantes da comunidade:', error);
      throw error;
    }
  }

  // ============================================================================
  // üìû CHAMADAS - 2 FUN√á√ïES
  // ============================================================================

  /**
   * Rejeitar chamada
   */
  async rejectCall(callId?: string): Promise<boolean> {
    try {
      const result = await this.client.rejectCall(callId);
      logger.info(`üìû Chamada rejeitada${callId ? `: ${callId}` : ''}`);
      return result;
    } catch (error: any) {
      logger.error('Erro ao rejeitar chamada:', error);
      throw error;
    }
  }

  // ============================================================================
  // üè∑Ô∏è LABELS/ETIQUETAS - 5 FUN√á√ïES
  // ============================================================================

  /**
   * Obter todas as labels/etiquetas
   */
  async getLabels(): Promise<any[]> {
    try {
      return await this.client.getAllLabels();
    } catch (error: any) {
      logger.error('Erro ao obter labels:', error);
      throw error;
    }
  }

  /**
   * Adicionar nova label
   */
  async addNewLabel(name: string): Promise<any> {
    try {
      const result = await this.client.addNewLabel(name);
      logger.info(`üè∑Ô∏è Label criada: ${name}`);
      return result;
    } catch (error: any) {
      logger.error('Erro ao criar label:', error);
      throw error;
    }
  }

  /**
   * Deletar label
   */
  async deleteLabel(labelId: string): Promise<any> {
    try {
      const result = await this.client.deleteLabel(labelId);
      logger.info(`üóëÔ∏è Label deletada: ${labelId}`);
      return result;
    } catch (error: any) {
      logger.error('Erro ao deletar label:', error);
      throw error;
    }
  }

  /**
   * Adicionar ou remover labels em chat
   */
  async addOrRemoveLabels(chatId: string, labelIds: string[], type: 'add' | 'remove'): Promise<any> {
    try {
      const options = labelIds.map(labelId => ({ labelId, type }));
      const result = await this.client.addOrRemoveLabels(chatId, options);
      logger.info(`üè∑Ô∏è Labels ${type === 'add' ? 'adicionadas' : 'removidas'} do chat ${chatId}`);
      return result;
    } catch (error: any) {
      logger.error('Erro ao adicionar/remover labels:', error);
      throw error;
    }
  }

  // ============================================================================
  // üë§ PERFIL/HOST - 9 FUN√á√ïES
  // ============================================================================

  /**
   * Definir foto de perfil
   */
  async setProfilePic(pathOrBase64: string): Promise<any> {
    try {
      const result = await this.client.setProfilePic(pathOrBase64);
      logger.info(`üì∏ Foto de perfil atualizada`);
      return result;
    } catch (error: any) {
      logger.error('Erro ao definir foto de perfil:', error);
      throw error;
    }
  }

  /**
   * Definir nome de perfil
   */
  async setProfileName(name: string): Promise<boolean> {
    try {
      const result = await this.client.setProfileName(name);
      logger.info(`‚úèÔ∏è Nome de perfil atualizado: ${name}`);
      return result;
    } catch (error: any) {
      logger.error('Erro ao definir nome:', error);
      throw error;
    }
  }

  /**
   * Definir status/bio
   */
  async setProfileStatus(status: string): Promise<any> {
    try {
      const result = await this.client.setProfileStatus(status);
      logger.info(`üìù Status/bio atualizado`);
      return result;
    } catch (error: any) {
      logger.error('Erro ao definir status:', error);
      throw error;
    }
  }

  /**
   * Obter token da sess√£o
   */
  async getSessionTokenBrowser(removePath?: boolean): Promise<any> {
    try {
      return await this.client.getSessionTokenBrowser(removePath);
    } catch (error: any) {
      logger.error('Erro ao obter token da sess√£o:', error);
      throw error;
    }
  }

  /**
   * Obter tema atual (light/dark)
   */
  async getTheme(): Promise<string> {
    try {
      return await this.client.getTheme();
    } catch (error: any) {
      logger.error('Erro ao obter tema:', error);
      throw error;
    }
  }

  /**
   * Fazer logout
   */
  async logout(): Promise<boolean> {
    try {
      const result = await this.client.logout();
      logger.info(`üö™ Logout realizado`);
      return result;
    } catch (error: any) {
      logger.error('Erro ao fazer logout:', error);
      throw error;
    }
  }

  /**
   * Screenshot do WhatsApp Web
   */
  async takeScreenshot(): Promise<string> {
    try {
      return await this.client.takeScreenshot();
    } catch (error: any) {
      logger.error('Erro ao tirar screenshot:', error);
      throw error;
    }
  }

  /**
   * Clicar em "Usar aqui"
   */
  async useHere(): Promise<boolean> {
    try {
      const result = await this.client.useHere();
      logger.info(`‚úÖ "Usar aqui" clicado`);
      return result;
    } catch (error: any) {
      logger.error('Erro ao clicar em usar aqui:', error);
      throw error;
    }
  }

  /**
   * Fechar sess√£o/navegador
   */
  async close(): Promise<boolean> {
    try {
      const result = await this.client.close();
      logger.info(`üîí Sess√£o fechada`);
      return result;
    } catch (error: any) {
      logger.error('Erro ao fechar sess√£o:', error);
      throw error;
    }
  }
}
