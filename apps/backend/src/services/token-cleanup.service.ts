/**
 * Token Cleanup Service
 * Servi√ßo para limpeza autom√°tica de tokens expirados
 */

import { CronJob } from 'cron';
import { refreshTokenService } from '../modules/auth/refresh-token.service';
import { logger } from '../utils/logger';

export class TokenCleanupService {
  private job: CronJob | null = null;

  /**
   * Iniciar servi√ßo de limpeza autom√°tica
   * Executa todos os dias √†s 3h da manh√£
   */
  start() {
    // Executar limpeza todo dia √†s 3h da manh√£ (hor√°rio de S√£o Paulo)
    this.job = new CronJob(
      '0 3 * * *',
      async () => {
        try {
          logger.info('üßπ Iniciando limpeza autom√°tica de tokens expirados...');
          const count = await refreshTokenService.cleanupExpiredTokens();
          logger.info(`‚úÖ ${count} tokens expirados removidos com sucesso`);
        } catch (error) {
          logger.error('‚ùå Erro na limpeza autom√°tica de tokens', { error });
        }
      },
      null,
      true, // Start imediatamente
      'America/Sao_Paulo'
    );

    logger.info('‚úÖ Token cleanup service iniciado (execu√ß√£o di√°ria √†s 3h)');
  }

  /**
   * Parar servi√ßo de limpeza autom√°tica
   */
  stop() {
    if (this.job) {
      this.job.stop();
      logger.info('üõë Token cleanup service parado');
    }
  }

  /**
   * Executar limpeza manualmente (√∫til para testes)
   */
  async runNow(): Promise<number> {
    logger.info('üßπ Executando limpeza manual de tokens...');
    const count = await refreshTokenService.cleanupExpiredTokens();
    logger.info(`‚úÖ ${count} tokens removidos`);
    return count;
  }
}

export const tokenCleanupService = new TokenCleanupService();
