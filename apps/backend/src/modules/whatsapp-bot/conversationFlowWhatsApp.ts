/**
 * FLUXO CONVERSACIONAL WHATSAPP BOT
 *
 * Bot que d√° continuidade √† conversa iniciada no chat web.
 * Ativado automaticamente quando lead solicita "Falar com a equipe".
 *
 * Caracter√≠sticas:
 * ‚úÖ Envia materiais automaticamente (PDFs, imagens, v√≠deos)
 * ‚úÖ Responde d√∫vidas usando FAQ
 * ‚úÖ Conversa sobre pre√ßos e condi√ß√µes
 * ‚úÖ SEMPRE termina com handoff para atendente humano
 */

export interface WhatsAppBotStep {
  id: string;
  name: string;
  botMessage: string | ((context: any) => string);
  options?: Array<{
    id: string;
    label: string;
    nextStepId: string;
    captureAs?: string;
  }>;
  captureInput?: {
    type: 'text' | 'any';
    nextStepId: string | ((input: string, context: any) => string);
  };
  actions?: Array<{
    type: 'send_media' | 'send_product_materials' | 'handoff_to_human' | 'schedule_followup';
    data?: any;
  }>;
  // Se true, aguarda resposta do usu√°rio. Se false, envia e vai para pr√≥ximo automaticamente
  awaitResponse?: boolean;
}

export const whatsAppBotFlow: WhatsAppBotStep[] = [
  // ========================================
  // ETAPA 1: MENSAGEM INICIAL (CONTEXTUALIZA√á√ÉO)
  // ========================================
  {
    id: 'initial_context',
    name: 'Mensagem Inicial',
    botMessage: (context) => {
      const { leadName, interesse, companyName } = context;
      return `Ol√°, ${leadName}! üëã\n\nAqui √© o assistente da ${companyName}!\n\nVi que voc√™ estava conversando comigo no site h√° pouco e demonstrou interesse em ${interesse}.\n\nPosso te enviar mais informa√ß√µes e materiais sobre ${interesse}? üòä`;
    },
    options: [
      { id: 'opt1', label: '‚úÖ Sim, pode enviar!', nextStepId: 'send_materials', captureAs: 'confirmed' },
      { id: 'opt2', label: 'üìÖ Pode, mas s√≥ amanh√£', nextStepId: 'schedule_tomorrow', captureAs: 'schedule' },
      { id: 'opt3', label: '‚ùå N√£o, obrigado', nextStepId: 'polite_close', captureAs: 'declined' },
    ],
    awaitResponse: true,
  },

  // ========================================
  // ETAPA 2A: ENVIO DE MATERIAIS
  // ========================================
  {
    id: 'send_materials',
    name: 'Envio de Materiais',
    botMessage: (context) => {
      const { leadName, interesse } = context;
      return `Perfeito, ${leadName}! Vou te mandar tudo agora. üì±\n\nPreparei um material completo sobre ${interesse} pra voc√™:`;
    },
    actions: [
      { type: 'send_product_materials' }, // Envia PDFs, imagens, v√≠deos, tabela de pre√ßos
    ],
    awaitResponse: false, // Envia e vai pro pr√≥ximo automaticamente
  },

  {
    id: 'after_materials',
    name: 'Ap√≥s Envio de Materiais',
    botMessage: (context) => {
      const { leadName, interesse } = context;
      return `Pronto! Enviei todo o material sobre ${interesse}. üì¶\n\nD√° uma olhada com calma e me conta: o que achou? Ficou alguma d√∫vida?`;
    },
    options: [
      { id: 'opt1', label: 'üí¨ Tenho uma d√∫vida', nextStepId: 'handle_question', captureAs: 'has_question' },
      { id: 'opt2', label: 'üí∞ Quero falar sobre pre√ßos', nextStepId: 'talk_pricing', captureAs: 'wants_pricing' },
      { id: 'opt3', label: 'üìç Onde fica a loja?', nextStepId: 'store_location', captureAs: 'wants_location' },
      { id: 'opt4', label: '‚úÖ Tudo claro, quero comprar', nextStepId: 'handoff_to_sales', captureAs: 'ready_to_buy' },
    ],
    awaitResponse: true,
  },

  // ========================================
  // ETAPA 2B: REAGENDAMENTO
  // ========================================
  {
    id: 'schedule_tomorrow',
    name: 'Reagendar para Amanh√£',
    botMessage: (context) => {
      const { leadName } = context;
      return `Tranquilo, ${leadName}! üòä\n\nVou te mandar as informa√ß√µes amanh√£ ent√£o.\n\nQue horas √© melhor pra voc√™?`;
    },
    options: [
      { id: 'opt1', label: 'üåÖ De manh√£ (8h-12h)', nextStepId: 'confirm_schedule', captureAs: 'morning' },
      { id: 'opt2', label: 'üåû √Ä tarde (13h-17h)', nextStepId: 'confirm_schedule', captureAs: 'afternoon' },
      { id: 'opt3', label: 'üåô √Ä noite (18h-21h)', nextStepId: 'confirm_schedule', captureAs: 'evening' },
    ],
    awaitResponse: true,
  },

  {
    id: 'confirm_schedule',
    name: 'Confirmar Agendamento',
    botMessage: (context) => {
      const { schedulePeriod } = context;
      const periodMap: any = {
        morning: 'de manh√£',
        afternoon: '√† tarde',
        evening: '√† noite',
      };
      return `Anotado! Amanh√£ ${periodMap[schedulePeriod]} eu te mando tudo certinho. üìù\n\nSe precisar antes, √© s√≥ me chamar aqui! üëã`;
    },
    actions: [
      { type: 'schedule_followup', data: { delay: '1day' } },
    ],
    awaitResponse: false,
  },

  // ========================================
  // ETAPA 2C: RECUSA EDUCADA
  // ========================================
  {
    id: 'polite_close',
    name: 'Encerramento Educado',
    botMessage: (context) => {
      const { leadName, interesse, companyPhone, companyAddress } = context;
      return `Sem problemas, ${leadName}! üòä\n\nSe mudar de ideia e quiser saber mais sobre ${interesse}, √© s√≥ me chamar aqui no WhatsApp.\n\nFico √† disposi√ß√£o! üëã\n\nüìû ${companyPhone}\nüìç ${companyAddress}`;
    },
    awaitResponse: false, // Encerra conversa
  },

  // ========================================
  // ETAPA 3: RESPONDER D√öVIDAS
  // ========================================
  {
    id: 'handle_question',
    name: 'Processar D√∫vida',
    botMessage: (context) => {
      const { leadName } = context;
      return `Claro! Pode perguntar, ${leadName}. Estou aqui pra te ajudar! üòä`;
    },
    captureInput: {
      type: 'text',
      nextStepId: 'answer_question', // Ser√° processado pelo service
    },
    awaitResponse: true,
  },

  {
    id: 'answer_question',
    name: 'Responder D√∫vida',
    botMessage: (context) => {
      const { faqAnswer, foundAnswer } = context;
      if (foundAnswer) {
        return `${faqAnswer}\n\nIsso esclarece sua d√∫vida? ü§î`;
      } else {
        return `Essa √© uma √≥tima pergunta! ü§î\n\nMas pra te responder com precis√£o, vou te conectar com um especialista do time que entende tudo desse produto.\n\nPode ser? üë®‚Äçüíº`;
      }
    },
    options: [
      { id: 'opt1', label: '‚úÖ Sim, esclareceu!', nextStepId: 'after_materials', captureAs: 'question_answered' },
      { id: 'opt2', label: '‚ùì Tenho outra d√∫vida', nextStepId: 'handle_question', captureAs: 'another_question' },
      { id: 'opt3', label: 'üë§ Quero falar com algu√©m', nextStepId: 'handoff_to_sales', captureAs: 'wants_human' },
    ],
    awaitResponse: true,
  },

  // ========================================
  // ETAPA 4: CONVERSA SOBRE PRE√áOS
  // ========================================
  {
    id: 'talk_pricing',
    name: 'Falar sobre Pre√ßos',
    botMessage: (context) => {
      const { interesse } = context;
      return `Opa! Vamos falar de valores ent√£o. üí∞\n\nVi aqui que voc√™ se interessou por ${interesse}.\n\nA tabela de pre√ßos que enviei est√° clara? Ou quer que eu explique melhor as condi√ß√µes?`;
    },
    options: [
      { id: 'opt1', label: 'üìã Tabela est√° clara', nextStepId: 'pricing_clear', captureAs: 'table_clear' },
      { id: 'opt2', label: 'üí≥ Como funciona o pagamento?', nextStepId: 'payment_options', captureAs: 'wants_payment_info' },
      { id: 'opt3', label: 'üéÅ Tem desconto?', nextStepId: 'ask_discount', captureAs: 'wants_discount' },
      { id: 'opt4', label: 'üìä Preciso de or√ßamento', nextStepId: 'handoff_to_sales', captureAs: 'needs_quote' },
    ],
    awaitResponse: true,
  },

  {
    id: 'payment_options',
    name: 'Op√ß√µes de Pagamento',
    botMessage: () => {
      return `Beleza! As formas de pagamento s√£o:\n\nüí≥ **√Ä vista:** Desconto especial\nüí∞ **Parcelado:** At√© 12x no cart√£o\nüìù **Boleto:** Desconto adicional\nüè¢ **Faturado:** Para empresas\n\nQual op√ß√£o te interessa mais?`;
    },
    options: [
      { id: 'opt1', label: 'üí≥ √Ä vista', nextStepId: 'handoff_to_sales', captureAs: 'avista' },
      { id: 'opt2', label: 'üí∞ Parcelado', nextStepId: 'handoff_to_sales', captureAs: 'parcelado' },
      { id: 'opt3', label: 'üë§ Falar com vendedor', nextStepId: 'handoff_to_sales', captureAs: 'wants_human' },
    ],
    awaitResponse: true,
  },

  {
    id: 'ask_discount',
    name: 'Perguntar sobre Desconto',
    botMessage: (context) => {
      const { leadName } = context;
      return `Olha que legal, ${leadName}! üéâ\n\nTemos algumas condi√ß√µes especiais:\n\n‚úÖ Compra √† vista: desconto exclusivo\n‚úÖ Compra de m√∫ltiplas unidades: desconto progressivo\n‚úÖ Primeira compra: desconto de boas-vindas\n\nE se voc√™ decidir hoje, posso falar com o gerente pra ver se consigo mais algum desconto. üòâ\n\nQuer que eu consulte?`;
    },
    options: [
      { id: 'opt1', label: '‚úÖ Sim, consulta pra mim!', nextStepId: 'handoff_to_sales', captureAs: 'wants_special_discount' },
      { id: 'opt2', label: 'üìã Me passa as condi√ß√µes', nextStepId: 'handoff_to_sales', captureAs: 'wants_conditions' },
    ],
    awaitResponse: true,
  },

  {
    id: 'pricing_clear',
    name: 'Pre√ßo Claro',
    botMessage: () => {
      return `√ìtimo! Ent√£o te passo direto pro time comercial que vai fechar a melhor condi√ß√£o pra voc√™. ü§ù\n\nPode ser agora?`;
    },
    options: [
      { id: 'opt1', label: '‚úÖ Pode sim!', nextStepId: 'handoff_to_sales', captureAs: 'ready' },
      { id: 'opt2', label: '‚è∞ Daqui a pouco', nextStepId: 'schedule_callback', captureAs: 'later' },
    ],
    awaitResponse: true,
  },

  // ========================================
  // ETAPA 5: LOCALIZA√á√ÉO DA LOJA
  // ========================================
  {
    id: 'store_location',
    name: 'Localiza√ß√£o da Loja',
    botMessage: (context) => {
      const { companyAddress, workingHours, companyPhone, companyWebsite } = context;
      return `Claro! Aqui est√£o nossas informa√ß√µes:\n\nüìç **Endere√ßo:** ${companyAddress}\n\nüïê **Hor√°rio:** ${workingHours}\n\nüìû **Telefone:** ${companyPhone}\n\nüåê **Site:** ${companyWebsite}\n\nQuer saber mais alguma coisa?`;
    },
    options: [
      { id: 'opt1', label: 'üìç Manda a localiza√ß√£o', nextStepId: 'send_location', captureAs: 'wants_map' },
      { id: 'opt2', label: '‚Ü©Ô∏è Voltar pro produto', nextStepId: 'after_materials', captureAs: 'back_to_product' },
      { id: 'opt3', label: 'üë§ Falar com algu√©m', nextStepId: 'handoff_to_sales', captureAs: 'wants_human' },
    ],
    awaitResponse: true,
  },

  {
    id: 'send_location',
    name: 'Enviar Localiza√ß√£o GPS',
    botMessage: () => {
      return `Pronto! Enviei a localiza√ß√£o no mapa. üìç\n\nSe precisar de algo mais, me avisa!`;
    },
    actions: [
      { type: 'send_media', data: { type: 'location' } },
    ],
    options: [
      { id: 'opt1', label: '‚Ü©Ô∏è Voltar pro produto', nextStepId: 'after_materials', captureAs: 'back' },
      { id: 'opt2', label: 'üë§ Falar com algu√©m', nextStepId: 'handoff_to_sales', captureAs: 'wants_human' },
    ],
    awaitResponse: true,
  },

  // ========================================
  // ETAPA 6: AGENDAR RETORNO
  // ========================================
  {
    id: 'schedule_callback',
    name: 'Agendar Retorno',
    botMessage: () => {
      return `Sem problema! Quando seria melhor pra voc√™?`;
    },
    options: [
      { id: 'opt1', label: '‚è∞ Daqui 1 hora', nextStepId: 'confirm_callback', captureAs: '1hour' },
      { id: 'opt2', label: 'üìÖ Daqui 2 horas', nextStepId: 'confirm_callback', captureAs: '2hours' },
      { id: 'opt3', label: 'üåô Mais tarde hoje', nextStepId: 'confirm_callback', captureAs: 'later_today' },
      { id: 'opt4', label: 'üìÜ Amanh√£', nextStepId: 'confirm_callback', captureAs: 'tomorrow' },
    ],
    awaitResponse: true,
  },

  {
    id: 'confirm_callback',
    name: 'Confirmar Agendamento',
    botMessage: (context) => {
      const { callbackTime } = context;
      const timeMap: any = {
        '1hour': 'daqui 1 hora',
        '2hours': 'daqui 2 horas',
        'later_today': 'mais tarde hoje',
        'tomorrow': 'amanh√£',
      };
      return `Anotado! Um atendente vai te chamar ${timeMap[callbackTime]}. üìù\n\nEnquanto isso, se quiser dar uma olhada em mais produtos, √© s√≥ me chamar! üëã`;
    },
    actions: [
      { type: 'schedule_followup' },
    ],
    awaitResponse: false,
  },

  // ========================================
  // ETAPA 7: HANDOFF PARA ATENDENTE HUMANO ‚≠ê
  // ========================================
  {
    id: 'handoff_to_sales',
    name: 'Transferir para Vendedor',
    botMessage: (context) => {
      const { leadName } = context;
      return `Perfeito, ${leadName}! ü§ù\n\nVou encaminhar voc√™ para o meu time de atendimento, onde um humano dar√° continuidade √† conversa.\n\nTenho certeza que eles v√£o te ajudar com tudo que voc√™ precisa!\n\nS√≥ um momento... üë®‚Äçüíº`;
    },
    actions: [
      { type: 'handoff_to_human' },
    ],
    awaitResponse: false, // Encerra bot, humano assume
  },
];

/**
 * Busca um step pelo ID
 */
export function getWhatsAppBotStepById(stepId: string): WhatsAppBotStep | undefined {
  return whatsAppBotFlow.find(step => step.id === stepId);
}

/**
 * Determina o pr√≥ximo step baseado na resposta do usu√°rio
 */
export function getNextWhatsAppBotStep(
  currentStepId: string,
  userResponse: string,
  context: any
): string | null {
  const currentStep = getWhatsAppBotStepById(currentStepId);
  if (!currentStep) return null;

  // Se tem op√ß√µes, buscar qual foi escolhida
  if (currentStep.options) {
    const selectedOption = currentStep.options.find(
      opt => opt.label.toLowerCase().includes(userResponse.toLowerCase()) ||
             userResponse.toLowerCase().includes(opt.label.toLowerCase().substring(0, 10))
    );

    if (selectedOption) {
      return selectedOption.nextStepId;
    }
  }

  // Se tem captureInput com nextStepId din√¢mico
  if (currentStep.captureInput) {
    if (typeof currentStep.captureInput.nextStepId === 'function') {
      return currentStep.captureInput.nextStepId(userResponse, context);
    }
    return currentStep.captureInput.nextStepId;
  }

  return null;
}
