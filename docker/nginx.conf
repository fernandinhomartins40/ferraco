events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log warn;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/vnd.ms-fontobject
        application/x-font-ttf
        font/opentype
        image/svg+xml
        image/x-icon;

    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=auth_limit:10m rate=5r/s;

    # Upstream para o backend Node.js (localhost na porta 3002)
    upstream api_backend {
        server 127.0.0.1:3002 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    # HTTP Server - Redirects to HTTPS in production
    server {
        listen 80;
        server_name painelcheckar.com.br www.painelcheckar.com.br localhost;

        # Root directory for frontend static files
        root /usr/share/nginx/html;
        index index.html;

        # Client body size limit
        client_max_body_size 10M;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy "default-src 'self' 'unsafe-inline' 'unsafe-eval' data: blob:; img-src 'self' data: https:; font-src 'self' data:;" always;

        # Disable nginx version in headers
        server_tokens off;

        # Health check endpoint
        location /health {
            access_log off;
            proxy_pass http://api_backend/api/health;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Auth routes - stricter rate limiting
        location /api/auth/ {
            limit_req zone=auth_limit burst=10 nodelay;

            proxy_pass http://api_backend/api/auth/;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;

            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;

            # Buffer settings
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            proxy_busy_buffers_size 8k;
        }

        # API routes - standard rate limiting
        location /api/ {
            limit_req zone=api_limit burst=20 nodelay;

            proxy_pass http://api_backend/api/;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;

            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;

            # Buffer settings
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            proxy_busy_buffers_size 8k;

            # CORS headers
            add_header Access-Control-Allow-Origin * always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, PATCH, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Requested-With" always;
            add_header Access-Control-Max-Age 3600 always;

            # Handle OPTIONS preflight requests
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin * always;
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, PATCH, OPTIONS" always;
                add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Requested-With" always;
                add_header Access-Control-Max-Age 3600 always;
                add_header Content-Length 0;
                add_header Content-Type text/plain;
                return 204;
            }
        }

        # Static assets - aggressive caching
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            access_log off;
            try_files $uri =404;
        }

        # Frontend routes - SPA fallback to index.html
        location / {
            try_files $uri $uri/ /index.html;

            # Cache control for HTML
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires 0;
        }

        # Error pages
        error_page 502 503 504 /50x.html;
        location = /50x.html {
            internal;
            default_type application/json;
            return 502 '{"success":false,"message":"Backend service unavailable","error":"Bad Gateway"}';
        }

        error_page 404 /404.html;
        location = /404.html {
            internal;
            root /usr/share/nginx/html;
        }
    }

    # HTTPS Server (Production with SSL)
    # Uncomment after running the SSL setup script
    # server {
    #     listen 443 ssl http2;
    #     server_name painelcheckar.com.br www.painelcheckar.com.br;
    #
    #     # SSL Certificates (Let's Encrypt via Certbot)
    #     ssl_certificate /etc/letsencrypt/live/painelcheckar.com.br/fullchain.pem;
    #     ssl_certificate_key /etc/letsencrypt/live/painelcheckar.com.br/privkey.pem;
    #     ssl_trusted_certificate /etc/letsencrypt/live/painelcheckar.com.br/chain.pem;
    #
    #     # SSL Configuration
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';
    #     ssl_prefer_server_ciphers off;
    #     ssl_session_cache shared:SSL:10m;
    #     ssl_session_timeout 10m;
    #     ssl_session_tickets off;
    #
    #     # OCSP Stapling
    #     ssl_stapling on;
    #     ssl_stapling_verify on;
    #     resolver 8.8.8.8 8.8.4.4 valid=300s;
    #     resolver_timeout 5s;
    #
    #     # Root directory for frontend static files
    #     root /usr/share/nginx/html;
    #     index index.html;
    #
    #     # Client body size limit
    #     client_max_body_size 10M;
    #
    #     # Security headers
    #     add_header X-Frame-Options "SAMEORIGIN" always;
    #     add_header X-Content-Type-Options "nosniff" always;
    #     add_header X-XSS-Protection "1; mode=block" always;
    #     add_header Referrer-Policy "no-referrer-when-downgrade" always;
    #     add_header Content-Security-Policy "default-src 'self' 'unsafe-inline' 'unsafe-eval' data: blob:; img-src 'self' data: https:; font-src 'self' data:;" always;
    #     add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    #
    #     # Disable nginx version in headers
    #     server_tokens off;
    #
    #     # Health check endpoint
    #     location /health {
    #         access_log off;
    #         proxy_pass http://api_backend/api/health;
    #         proxy_http_version 1.1;
    #         proxy_set_header Connection "";
    #         proxy_set_header Host $host;
    #         proxy_set_header X-Real-IP $remote_addr;
    #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #         proxy_set_header X-Forwarded-Proto $scheme;
    #     }
    #
    #     # Auth routes - stricter rate limiting
    #     location /api/auth/ {
    #         limit_req zone=auth_limit burst=10 nodelay;
    #
    #         proxy_pass http://api_backend/api/auth/;
    #         proxy_http_version 1.1;
    #         proxy_set_header Connection "";
    #         proxy_set_header Upgrade $http_upgrade;
    #         proxy_set_header Host $host;
    #         proxy_set_header X-Real-IP $remote_addr;
    #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #         proxy_set_header X-Forwarded-Proto $scheme;
    #         proxy_cache_bypass $http_upgrade;
    #
    #         proxy_connect_timeout 60s;
    #         proxy_send_timeout 60s;
    #         proxy_read_timeout 60s;
    #
    #         proxy_buffering on;
    #         proxy_buffer_size 4k;
    #         proxy_buffers 8 4k;
    #         proxy_busy_buffers_size 8k;
    #     }
    #
    #     # API routes - standard rate limiting
    #     location /api/ {
    #         limit_req zone=api_limit burst=20 nodelay;
    #
    #         proxy_pass http://api_backend/api/;
    #         proxy_http_version 1.1;
    #         proxy_set_header Connection "";
    #         proxy_set_header Upgrade $http_upgrade;
    #         proxy_set_header Host $host;
    #         proxy_set_header X-Real-IP $remote_addr;
    #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #         proxy_set_header X-Forwarded-Proto $scheme;
    #         proxy_cache_bypass $http_upgrade;
    #
    #         proxy_connect_timeout 60s;
    #         proxy_send_timeout 60s;
    #         proxy_read_timeout 60s;
    #
    #         proxy_buffering on;
    #         proxy_buffer_size 4k;
    #         proxy_buffers 8 4k;
    #         proxy_busy_buffers_size 8k;
    #
    #         add_header Access-Control-Allow-Origin * always;
    #         add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, PATCH, OPTIONS" always;
    #         add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Requested-With" always;
    #         add_header Access-Control-Max-Age 3600 always;
    #
    #         if ($request_method = 'OPTIONS') {
    #             add_header Access-Control-Allow-Origin * always;
    #             add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, PATCH, OPTIONS" always;
    #             add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Requested-With" always;
    #             add_header Access-Control-Max-Age 3600 always;
    #             add_header Content-Length 0;
    #             add_header Content-Type text/plain;
    #             return 204;
    #         }
    #     }
    #
    #     # Static assets - aggressive caching
    #     location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
    #         expires 1y;
    #         add_header Cache-Control "public, immutable";
    #         access_log off;
    #         try_files $uri =404;
    #     }
    #
    #     # Frontend routes - SPA fallback to index.html
    #     location / {
    #         try_files $uri $uri/ /index.html;
    #
    #         add_header Cache-Control "no-cache, no-store, must-revalidate";
    #         add_header Pragma "no-cache";
    #         add_header Expires 0;
    #     }
    #
    #     # Error pages
    #     error_page 502 503 504 /50x.html;
    #     location = /50x.html {
    #         internal;
    #         default_type application/json;
    #         return 502 '{"success":false,"message":"Backend service unavailable","error":"Bad Gateway"}';
    #     }
    #
    #     error_page 404 /404.html;
    #     location = /404.html {
    #         internal;
    #         root /usr/share/nginx/html;
    #     }
    # }

    # HTTP to HTTPS Redirect (Production)
    # Uncomment this after SSL is configured
    # server {
    #     listen 80;
    #     server_name painelcheckar.com.br www.painelcheckar.com.br;
    #
    #     # Allow Let's Encrypt challenges
    #     location /.well-known/acme-challenge/ {
    #         root /var/www/certbot;
    #     }
    #
    #     # Redirect all other traffic to HTTPS
    #     location / {
    #         return 301 https://$server_name$request_uri;
    #     }
    # }
}
