/**
 * Script para verificar resultados dos testes no banco de dados
 */

const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function checkTestResults() {
  console.log('\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
  console.log('‚ïë        VERIFICA√á√ÉO DOS RESULTADOS DOS TESTES          ‚ïë');
  console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n');

  try {
    // Buscar todos os leads de teste
    const testLeads = await prisma.lead.findMany({
      where: {
        OR: [
          { name: { contains: 'Fernando Martins' } },
          { name: { contains: 'Fernando Teste B' } },
          { name: { contains: 'Fernando Teste C' } },
        ],
        createdAt: {
          gte: new Date(Date.now() - 10 * 60 * 1000) // √öltimos 10 minutos
        }
      },
      orderBy: {
        createdAt: 'desc'
      },
      take: 10
    });

    if (testLeads.length === 0) {
      console.log('‚ö†Ô∏è Nenhum lead de teste encontrado nos √∫ltimos 10 minutos.\n');
      return;
    }

    console.log(`üìä Encontrados ${testLeads.length} leads de teste:\n`);

    for (const lead of testLeads) {
      console.log('‚îÄ'.repeat(55));
      console.log(`üÜî ID: ${lead.id}`);
      console.log(`üë§ Nome: ${lead.name}`);
      console.log(`üìß Email: ${lead.email}`);
      console.log(`üìû Telefone: ${lead.phone}`);
      console.log(`üìÖ Criado em: ${lead.createdAt.toISOString()}`);

      // Parse metadata
      let metadata = {};
      try {
        metadata = JSON.parse(lead.metadata || '{}');
      } catch (e) {
        console.log('‚ö†Ô∏è Erro ao parsear metadata');
      }

      const selectedProducts = metadata.selectedProducts || [];
      console.log(`üì¶ Produtos: ${selectedProducts.length > 0 ? selectedProducts.join(', ') : 'NENHUM'}`);
      console.log(`ü§ñ Should trigger bot: ${metadata.shouldTriggerWhatsAppBot ? 'SIM' : 'N√ÉO'}`);

      // Verificar se h√° automa√ß√£o
      const automation = await prisma.whatsAppAutomation.findFirst({
        where: { leadId: lead.id }
      });

      if (automation) {
        console.log(`‚úÖ Automa√ß√£o: ${automation.id} (Status: ${automation.status})`);
      } else {
        console.log(`‚ùå Automa√ß√£o: N√ÉO CRIADA`);
      }

      console.log('');
    }

    console.log('‚ïê'.repeat(55));

    // An√°lise dos cen√°rios
    console.log('\nüìã AN√ÅLISE POR CEN√ÅRIO:\n');

    const scenarioA = testLeads.find(l => l.name === 'Fernando Martins');
    const scenarioB = testLeads.find(l => l.name === 'Fernando Teste B');
    const scenarioC = testLeads.find(l => l.name === 'Fernando Teste C');

    // Cen√°rio A
    if (scenarioA) {
      const metaA = JSON.parse(scenarioA.metadata || '{}');
      const productsA = metaA.selectedProducts || [];
      const autoA = await prisma.whatsAppAutomation.findFirst({ where: { leadId: scenarioA.id } });

      console.log('‚úÖ CEN√ÅRIO A (Fluxo Normal):');
      console.log(`   - Lead criado: SIM (${scenarioA.id})`);
      console.log(`   - Produtos: ${productsA.length > 0 ? `${productsA.length} produto(s) ‚úÖ` : 'NENHUM ‚ùå'}`);
      console.log(`   - Automa√ß√£o: ${autoA ? `CRIADA ‚úÖ` : 'N√ÉO CRIADA ‚ùå'}`);
      console.log(`   - Resultado: ${productsA.length > 0 && autoA ? 'üéâ PASSOU' : '‚ùå FALHOU'}\n`);
    } else {
      console.log('‚ùå CEN√ÅRIO A: Lead n√£o encontrado\n');
    }

    // Cen√°rio B
    if (scenarioB) {
      const metaB = JSON.parse(scenarioB.metadata || '{}');
      const productsB = metaB.selectedProducts || [];
      const autoB = await prisma.whatsAppAutomation.findFirst({ where: { leadId: scenarioB.id } });

      console.log('‚úÖ CEN√ÅRIO B (Auto-save + Update):');
      console.log(`   - Lead criado: SIM (${scenarioB.id})`);
      console.log(`   - Produtos: ${productsB.length > 0 ? `${productsB.length} produto(s) ‚úÖ` : 'NENHUM ‚ùå'}`);
      console.log(`   - Automa√ß√£o: ${autoB ? `CRIADA ‚úÖ` : 'N√ÉO CRIADA ‚ùå'}`);
      console.log(`   - Resultado: ${productsB.length > 0 && autoB ? 'üéâ PASSOU' : '‚ùå FALHOU'}\n`);
    } else {
      console.log('‚ùå CEN√ÅRIO B: Lead n√£o encontrado\n');
    }

    // Cen√°rio C
    if (scenarioC) {
      const metaC = JSON.parse(scenarioC.metadata || '{}');
      const productsC = metaC.selectedProducts || [];
      const autoC = await prisma.whatsAppAutomation.findFirst({ where: { leadId: scenarioC.id } });

      console.log('‚úÖ CEN√ÅRIO C (Abandono):');
      console.log(`   - Lead criado: SIM (${scenarioC.id})`);
      console.log(`   - Produtos: ${productsC.length === 0 ? 'NENHUM ‚úÖ' : `${productsC.length} produto(s) ‚ùå`}`);
      console.log(`   - Automa√ß√£o: ${!autoC ? 'N√ÉO CRIADA ‚úÖ' : `CRIADA ‚ùå`}`);
      console.log(`   - Resultado: ${productsC.length === 0 && !autoC ? 'üéâ PASSOU' : '‚ùå FALHOU'}\n`);
    } else {
      console.log('‚ùå CEN√ÅRIO C: Lead n√£o encontrado\n');
    }

    console.log('‚ïê'.repeat(55) + '\n');

  } catch (error) {
    console.error('‚ùå Erro ao consultar banco:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkTestResults();
