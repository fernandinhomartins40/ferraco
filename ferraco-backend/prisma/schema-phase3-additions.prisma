// ==========================================
// PHASE 3 - ADVANCED FEATURES
// Schema Additions for Prisma
// ==========================================
//
// INSTRU√á√ïES DE USO:
// 1. Revisar este arquivo completamente
// 2. Copiar os modelos necess√°rios para schema.prisma
// 3. Adicionar as rela√ß√µes nos modelos existentes (User, Lead, Integration, Interaction)
// 4. Executar: npx prisma migrate dev --name add-phase3-models
// 5. Executar: npx prisma generate
//
// ==========================================

// ==========================================
// üß† AI E AN√ÅLISES PREDITIVAS
// ==========================================

model AIAnalysis {
  id              String   @id @default(uuid())
  leadId          String   @unique
  lead            Lead     @relation(fields: [leadId], references: [id], onDelete: Cascade)

  sentimentScore  Float    // -1 to 1
  sentiment       Sentiment
  keyTopics       String   @db.Text  // JSON array
  urgencyLevel    UrgencyLevel
  confidenceScore Int      // 0-100
  lastAnalyzed    DateTime @default(now())

  recommendations AIRecommendation[]

  @@index([leadId])
  @@index([urgencyLevel])
  @@index([lastAnalyzed])
  @@map("ai_analyses")
}

enum Sentiment {
  POSITIVE
  NEUTRAL
  NEGATIVE
}

enum UrgencyLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

model AIRecommendation {
  id               String      @id @default(uuid())
  aiAnalysisId     String
  aiAnalysis       AIAnalysis  @relation(fields: [aiAnalysisId], references: [id], onDelete: Cascade)

  type             RecommendationType
  priority         RecommendationPriority
  title            String
  description      String      @db.Text
  suggestedAction  String      @db.Text
  expectedImpact   String
  confidence       Int         // 0-100
  isImplemented    Boolean     @default(false)

  createdAt        DateTime    @default(now())

  @@index([aiAnalysisId])
  @@index([priority])
  @@index([isImplemented])
  @@map("ai_recommendations")
}

enum RecommendationType {
  CALL
  EMAIL
  WHATSAPP
  MEETING
  FOLLOW_UP
  TAG
  PRIORITY_CHANGE
}

enum RecommendationPriority {
  LOW
  MEDIUM
  HIGH
}

// ==========================================
// üìä PREDI√á√ÉO DE CONVERS√ÉO
// ==========================================

model ConversionPrediction {
  id                        String              @id @default(uuid())
  leadId                    String              @unique
  lead                      Lead                @relation(fields: [leadId], references: [id], onDelete: Cascade)

  probability               Int                 // 0-100
  confidence                Int                 // 0-100
  estimatedTimeToConversion Int                 // days
  suggestedActions          String              @db.Text  // JSON array
  lastUpdated               DateTime            @default(now())

  factors                   ConversionFactor[]

  @@index([leadId])
  @@index([probability])
  @@map("conversion_predictions")
}

model ConversionFactor {
  id                     String                @id @default(uuid())
  conversionPredictionId String
  conversionPrediction   ConversionPrediction  @relation(fields: [conversionPredictionId], references: [id], onDelete: Cascade)

  factor                 String
  impact                 Impact
  weight                 Float
  description            String

  @@index([conversionPredictionId])
  @@map("conversion_factors")
}

enum Impact {
  POSITIVE
  NEGATIVE
  NEUTRAL
}

// ==========================================
// üéØ LEAD SCORING
// ==========================================

model LeadScoring {
  id             String          @id @default(uuid())
  leadId         String          @unique
  lead           Lead            @relation(fields: [leadId], references: [id], onDelete: Cascade)

  score          Int
  lastCalculated DateTime        @default(now())

  factors        ScoringFactor[]
  history        ScoreHistory[]

  @@index([leadId])
  @@index([score])
  @@map("lead_scorings")
}

model ScoringFactor {
  id            String       @id @default(uuid())
  leadScoringId String
  leadScoring   LeadScoring  @relation(fields: [leadScoringId], references: [id], onDelete: Cascade)

  factor        String
  value         String       @db.Text  // JSON
  points        Int
  weight        Float
  description   String

  @@index([leadScoringId])
  @@map("scoring_factors")
}

model ScoreHistory {
  id            String       @id @default(uuid())
  leadScoringId String
  leadScoring   LeadScoring  @relation(fields: [leadScoringId], references: [id], onDelete: Cascade)

  date          DateTime     @default(now())
  score         Int
  change        Int
  reason        String

  @@index([leadScoringId])
  @@index([date])
  @@map("score_history")
}

// ==========================================
// üîç DETEC√á√ÉO DE DUPLICATAS
// ==========================================

model DuplicateDetection {
  id                  String             @id @default(uuid())
  leadId              String
  lead                Lead               @relation(fields: [leadId], references: [id], onDelete: Cascade)

  confidence          Int                // 0-100
  status              DuplicateStatus
  resolvedAt          DateTime?
  resolvedBy          String?

  createdAt           DateTime           @default(now())

  potentialDuplicates DuplicateMatch[]

  @@index([leadId])
  @@index([status])
  @@index([createdAt])
  @@map("duplicate_detections")
}

model DuplicateMatch {
  id                    String              @id @default(uuid())
  duplicateDetectionId  String
  duplicateDetection    DuplicateDetection  @relation(fields: [duplicateDetectionId], references: [id], onDelete: Cascade)

  duplicateLeadId       String
  similarity            Float
  matchingFields        String              @db.Text  // JSON array
  suggestedAction       SuggestedAction

  @@index([duplicateDetectionId])
  @@index([duplicateLeadId])
  @@map("duplicate_matches")
}

enum DuplicateStatus {
  PENDING
  CONFIRMED
  DISMISSED
}

enum SuggestedAction {
  MERGE
  KEEP_SEPARATE
  NEEDS_REVIEW
}

// ==========================================
// ü§ñ CHATBOT E QUALIFICA√á√ÉO
// ==========================================

model ChatbotConfig {
  id                    String             @id @default(uuid())
  isEnabled             Boolean            @default(false)
  welcomeMessage        String             @db.Text
  fallbackMessage       String             @db.Text
  handoffTriggers       String             @db.Text  // JSON array

  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt

  qualificationQuestions ChatbotQuestion[]
  businessHours         BusinessHours?

  @@map("chatbot_configs")
}

model ChatbotQuestion {
  id              String         @id @default(uuid())
  chatbotConfigId String
  chatbotConfig   ChatbotConfig  @relation(fields: [chatbotConfigId], references: [id], onDelete: Cascade)

  question        String         @db.Text
  type            QuestionType
  options         String?        @db.Text  // JSON array
  isRequired      Boolean
  order           Int

  followUpRules   ChatbotRule[]

  @@index([chatbotConfigId])
  @@index([order])
  @@map("chatbot_questions")
}

model ChatbotRule {
  id                String           @id @default(uuid())
  chatbotQuestionId String
  chatbotQuestion   ChatbotQuestion  @relation(fields: [chatbotQuestionId], references: [id], onDelete: Cascade)

  condition         String
  action            RuleAction
  value             String           @db.Text  // JSON

  @@index([chatbotQuestionId])
  @@map("chatbot_rules")
}

model BusinessHours {
  id              String         @id @default(uuid())
  chatbotConfigId String         @unique
  chatbotConfig   ChatbotConfig  @relation(fields: [chatbotConfigId], references: [id], onDelete: Cascade)

  timezone        String
  monday          String         @db.Text  // JSON TimeSlot
  tuesday         String         @db.Text
  wednesday       String         @db.Text
  thursday        String         @db.Text
  friday          String         @db.Text
  saturday        String         @db.Text
  sunday          String         @db.Text

  @@map("business_hours")
}

enum QuestionType {
  TEXT
  MULTIPLE_CHOICE
  NUMBER
  EMAIL
  PHONE
}

enum RuleAction {
  ASK_QUESTION
  ADD_TAG
  SET_PRIORITY
  HANDOFF
  END_CONVERSATION
}

// ==========================================
// üìä ANALYTICS AVAN√áADO
// ==========================================

model AdvancedAnalytics {
  id                  String              @id @default(uuid())
  periodStart         DateTime
  periodEnd           DateTime
  generatedAt         DateTime            @default(now())

  conversionFunnelData String             @db.Text  // JSON FunnelData
  cohortAnalysisData   String             @db.Text  // JSON CohortData

  leadSources         SourceAnalytics[]
  teamPerformance     TeamPerformanceRecord[]
  predictiveInsights  PredictiveInsight[]
  benchmarks          Benchmark[]

  @@index([periodStart])
  @@index([periodEnd])
  @@map("advanced_analytics")
}

model SourceAnalytics {
  id                   String             @id @default(uuid())
  advancedAnalyticsId  String
  advancedAnalytics    AdvancedAnalytics  @relation(fields: [advancedAnalyticsId], references: [id], onDelete: Cascade)

  source               String
  count                Int
  conversionRate       Float
  averageValue         Float
  cost                 Float
  roi                  Float
  trend                AnalyticsTrend

  @@index([advancedAnalyticsId])
  @@index([source])
  @@map("source_analytics")
}

model TeamPerformanceRecord {
  id                   String             @id @default(uuid())
  advancedAnalyticsId  String
  advancedAnalytics    AdvancedAnalytics  @relation(fields: [advancedAnalyticsId], references: [id], onDelete: Cascade)

  userId               String
  userName             String
  leadsAssigned        Int
  leadsConverted       Int
  conversionRate       Float
  averageResponseTime  Int                // minutes
  satisfaction         Float
  activities           Int

  @@index([advancedAnalyticsId])
  @@index([userId])
  @@map("team_performance_records")
}

model PredictiveInsight {
  id                   String             @id @default(uuid())
  advancedAnalyticsId  String
  advancedAnalytics    AdvancedAnalytics  @relation(fields: [advancedAnalyticsId], references: [id], onDelete: Cascade)

  type                 InsightType
  title                String
  description          String             @db.Text
  confidence           Int                // 0-100
  impact               ImpactLevel
  timeframe            String
  recommendations      String             @db.Text  // JSON array
  data                 String             @db.Text  // JSON

  @@index([advancedAnalyticsId])
  @@index([type])
  @@map("predictive_insights")
}

model Benchmark {
  id                   String             @id @default(uuid())
  advancedAnalyticsId  String
  advancedAnalytics    AdvancedAnalytics  @relation(fields: [advancedAnalyticsId], references: [id], onDelete: Cascade)

  metric               String
  value                Float
  industry             String
  percentile           Int
  trend                BenchmarkTrend
  source               String

  @@index([advancedAnalyticsId])
  @@index([metric])
  @@map("benchmarks")
}

enum AnalyticsTrend {
  UP
  DOWN
  STABLE
}

enum InsightType {
  REVENUE_FORECAST
  CHURN_PREDICTION
  LEAD_QUALITY
  SEASONAL_TRENDS
}

enum ImpactLevel {
  HIGH
  MEDIUM
  LOW
}

enum BenchmarkTrend {
  ABOVE
  BELOW
  AT
  UNKNOWN
}

// ==========================================
// üîê ASSINATURAS DIGITAIS
// ==========================================

model DigitalSignature {
  id            String         @id @default(uuid())
  userId        String
  user          User           @relation(fields: [userId], references: [id])

  leadId        String
  lead          Lead           @relation(fields: [leadId], references: [id], onDelete: Cascade)

  documentType  DocumentType
  signatureData String         @db.Text  // base64 encoded
  timestamp     DateTime       @default(now())
  ipAddress     String
  isValid       Boolean        @default(true)
  certificateId String?

  @@index([userId])
  @@index([leadId])
  @@index([timestamp])
  @@map("digital_signatures")
}

enum DocumentType {
  CONTRACT
  PROPOSAL
  AGREEMENT
  NDA
  CUSTOM
}

// ==========================================
// üìé ARQUIVOS DE INTERA√á√ïES
// ==========================================

model InteractionFile {
  id            String       @id @default(uuid())
  interactionId String
  interaction   Interaction  @relation(fields: [interactionId], references: [id], onDelete: Cascade)

  name          String
  url           String
  type          String
  size          Int
  uploadedAt    DateTime     @default(now())

  @@index([interactionId])
  @@map("interaction_files")
}

// ==========================================
// üîå INTEGRA√á√ïES - GOOGLE ANALYTICS
// ==========================================

model GoogleAnalyticsConfig {
  id            String      @id @default(uuid())
  integrationId String      @unique
  integration   Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)

  trackingId    String
  viewId        String

  events        GAEvent[]
  goals         GAGoal[]

  @@map("google_analytics_configs")
}

model GAEvent {
  id                      String                  @id @default(uuid())
  googleAnalyticsConfigId String
  config                  GoogleAnalyticsConfig   @relation(fields: [googleAnalyticsConfigId], references: [id], onDelete: Cascade)

  name                    String
  category                String
  action                  String
  label                   String?
  value                   Int?

  @@index([googleAnalyticsConfigId])
  @@map("ga_events")
}

model GAGoal {
  id                      String                  @id @default(uuid())
  googleAnalyticsConfigId String
  config                  GoogleAnalyticsConfig   @relation(fields: [googleAnalyticsConfigId], references: [id], onDelete: Cascade)

  name                    String
  type                    GAGoalType
  value                   Float
  isActive                Boolean                 @default(true)

  @@index([googleAnalyticsConfigId])
  @@map("ga_goals")
}

enum GAGoalType {
  DESTINATION
  DURATION
  PAGES
  EVENT
}

// ==========================================
// üîå INTEGRA√á√ïES - FACEBOOK ADS
// ==========================================

model FacebookAdsConfig {
  id            String      @id @default(uuid())
  integrationId String      @unique
  integration   Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)

  accountId     String
  adAccounts    String      @db.Text  // JSON array

  campaigns     FBCampaign[]
  leadGenForms  FBLeadForm[]

  @@map("facebook_ads_configs")
}

model FBCampaign {
  id                   String              @id @default(uuid())
  facebookAdsConfigId  String
  config               FacebookAdsConfig   @relation(fields: [facebookAdsConfigId], references: [id], onDelete: Cascade)

  name                 String
  status               CampaignStatus
  budget               Float
  isTracked            Boolean             @default(false)

  @@index([facebookAdsConfigId])
  @@map("fb_campaigns")
}

model FBLeadForm {
  id                   String              @id @default(uuid())
  facebookAdsConfigId  String
  config               FacebookAdsConfig   @relation(fields: [facebookAdsConfigId], references: [id], onDelete: Cascade)

  name                 String
  status               FormStatus
  isConnected          Boolean             @default(false)
  fieldMapping         String              @db.Text  // JSON array of DataMapping

  @@index([facebookAdsConfigId])
  @@map("fb_lead_forms")
}

enum CampaignStatus {
  ACTIVE
  PAUSED
  ARCHIVED
}

enum FormStatus {
  ACTIVE
  PAUSED
  ARCHIVED
}

// ==========================================
// üë§ USER PREFERENCES E NOTIFICA√á√ïES
// ==========================================

model UserPreferences {
  id          String    @id @default(uuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  theme       Theme     @default(AUTO)
  language    String    @default("pt-BR")
  timezone    String    @default("America/Sao_Paulo")
  dashboardId String?

  notifications NotificationSettings?

  @@map("user_preferences")
}

model NotificationSettings {
  id                String           @id @default(uuid())
  userPreferencesId String           @unique
  userPreferences   UserPreferences  @relation(fields: [userPreferencesId], references: [id], onDelete: Cascade)

  // Email Notifications
  emailNewLeads          Boolean @default(true)
  emailLeadUpdates       Boolean @default(true)
  emailAutomationResults Boolean @default(true)
  emailWeeklyReports     Boolean @default(true)
  emailSystemAlerts      Boolean @default(true)

  // Push Notifications
  pushEnabled        Boolean @default(false)
  pushUrgentLeads    Boolean @default(true)
  pushAssignedTasks  Boolean @default(true)
  pushDeadlines      Boolean @default(true)

  // In-App Notifications
  inAppEnabled  Boolean @default(true)
  inAppSound    Boolean @default(true)
  inAppDesktop  Boolean @default(true)

  @@map("notification_settings")
}

enum Theme {
  LIGHT
  DARK
  AUTO
}

// ==========================================
// üìù ALTERA√á√ïES EM MODELOS EXISTENTES
// ==========================================

// IMPORTANTE: Adicionar no modelo User:
//   preferences       UserPreferences?
//   digitalSignatures DigitalSignature[]

// IMPORTANTE: Adicionar no modelo Lead:
//   aiAnalysis           AIAnalysis?
//   conversionPrediction ConversionPrediction?
//   leadScoring          LeadScoring?
//   duplicateDetections  DuplicateDetection[]
//   digitalSignatures    DigitalSignature[]

// IMPORTANTE: Adicionar no modelo Interaction:
//   participants  String   @db.Text  // JSON array de user IDs
//   files         InteractionFile[]

// IMPORTANTE: Adicionar no modelo Integration:
//   googleAnalytics GoogleAnalyticsConfig?
//   facebookAds     FacebookAdsConfig?

// IMPORTANTE: Adicionar no modelo Opportunity:
//   competitors   String?  @db.Text  // JSON array de strings
