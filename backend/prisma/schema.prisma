// Ferraco CRM - Database Schema
// SQLite database with Prisma ORM

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ========================================
// CORE ENTITIES
// ========================================

model Lead {
  id          String   @id @default(cuid())
  name        String
  phone       String
  email       String?
  status      String   @default("NOVO") // LeadStatus: NOVO, EM_ANDAMENTO, CONCLUIDO
  source      String   @default("website")
  priority    String   @default("MEDIUM") // Priority: LOW, MEDIUM, HIGH
  assignedTo  String?
  nextFollowUp DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Phase 3 - Advanced features
  leadScore   Float?
  pipelineStage String?
  duplicateOf String?
  isDuplicate Boolean @default(false)

  // Relationships
  notes       LeadNote[]
  tags        LeadTag[]
  communications Communication[]
  interactions  Interaction[]
  duplicateDetections DuplicateDetection[]

  // Fase 3 - Advanced Features Relationships
  automations AutomationExecution[]
  opportunities Opportunity[]
  aiAnalysis    AIAnalysis?
  leadScoring   LeadScoring?
  conversionPredictions ConversionPrediction[]

  @@map("leads")
}

model PartialLead {
  id               String   @id @default(cuid())
  sessionId        String   // ID único da sessão do usuário
  name             String   @default("")
  phone            String   @default("")
  source           String   @default("website") // Origem: modal-orcamento, footer-form, etc
  url              String   // URL onde foi capturado
  userAgent        String   // User agent do navegador
  ipAddress        String?  // IP do usuário
  firstInteraction DateTime @default(now())
  lastUpdate       DateTime @updatedAt @default(now())
  interactions     Int      @default(1) // Número de vezes que foi atualizado
  completed        Boolean  @default(false) // Se foi convertido em lead real
  abandoned        Boolean  @default(false) // Se foi marcado como abandonado
  completedAt      DateTime? // Quando foi convertido/abandonado
  createdAt        DateTime @default(now())

  @@map("partial_leads")
}

model LeadNote {
  id        String   @id @default(cuid())
  content   String
  important Boolean  @default(false)
  category  String?
  isPrivate Boolean  @default(false)
  leadId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  createdBy String?

  lead      Lead     @relation(fields: [leadId], references: [id], onDelete: Cascade)

  @@map("lead_notes")
}

// ========================================
// TAGGING SYSTEM
// ========================================

model Tag {
  id          String    @id @default(cuid())
  name        String    @unique
  color       String
  description String?
  isSystem    Boolean   @default(false)
  category    String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  createdBy   String?

  leads       LeadTag[]
  rules       TagRule[]

  @@map("tags")
}

model LeadTag {
  leadId    String
  tagId     String
  addedAt   DateTime @default(now())
  addedBy   String?

  lead      Lead @relation(fields: [leadId], references: [id], onDelete: Cascade)
  tag       Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([leadId, tagId])
  @@map("lead_tags")
}

model TagRule {
  id          String    @id @default(cuid())
  tagId       String
  condition   String    // JSON string with conditions
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())

  tag         Tag       @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@map("tag_rules")
}

// ========================================
// COMMUNICATION SYSTEM
// ========================================

model Communication {
  id          String           @id @default(cuid())
  leadId      String
  type        String           // CommunicationType: WHATSAPP, EMAIL, SMS, CALL, NOTE
  content     String
  status      String           @default("PENDING") // CommunicationStatus: PENDING, SENT, DELIVERED, FAILED, CANCELLED
  scheduledFor DateTime?
  sentAt      DateTime?
  templateId  String?
  createdAt   DateTime         @default(now())
  createdBy   String?

  lead        Lead             @relation(fields: [leadId], references: [id], onDelete: Cascade)
  template    CommunicationTemplate? @relation(fields: [templateId], references: [id])

  @@map("communications")
}

model CommunicationTemplate {
  id          String    @id @default(cuid())
  name        String
  type        String    // CommunicationType: WHATSAPP, EMAIL, SMS, CALL, NOTE
  content     String
  variables   String    // JSON array of variable names
  isActive    Boolean   @default(true)
  isSystem    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  createdBy   String?

  communications Communication[]

  @@map("communication_templates")
}

// ========================================
// AUTOMATION SYSTEM
// ========================================

model Automation {
  id          String   @id @default(cuid())
  name        String
  description String?
  isActive    Boolean  @default(true)
  trigger     String   // JSON: { type: "lead_created", conditions: [...] }
  actions     String   // JSON: [{ type: "add_tag", value: "hot-lead" }]
  priority    Int      @default(5)
  createdAt   DateTime @default(now())
  createdBy   String?

  executions  AutomationExecution[]

  @@map("automations")
}

model AutomationExecution {
  id           String           @id @default(cuid())
  automationId String
  leadId       String
  status       String           @default("PENDING") // ExecutionStatus: PENDING, RUNNING, SUCCESS, FAILED, CANCELLED
  result       String?          // JSON with execution result
  errorMessage String?
  executedAt   DateTime         @default(now())

  automation   Automation       @relation(fields: [automationId], references: [id])
  lead         Lead             @relation(fields: [leadId], references: [id])

  @@map("automation_executions")
}

// ========================================
// REPORTING SYSTEM
// ========================================

model Report {
  id          String      @id @default(cuid())
  name        String
  description String?
  type        String           // ReportType: DASHBOARD, LEADS, CONVERSION, PERFORMANCE, ANALYTICS, CUSTOM
  config      String      // JSON configuration
  isActive    Boolean     @default(true)
  isSystem    Boolean     @default(false)
  createdAt   DateTime    @default(now())
  createdBy   String?

  executions  ReportExecution[]

  @@map("reports")
}

model ReportExecution {
  id          String    @id @default(cuid())
  reportId    String
  data        String    // JSON with report data
  generatedAt DateTime  @default(now())
  generatedBy String?

  report      Report    @relation(fields: [reportId], references: [id])

  @@map("report_executions")
}

// ========================================
// PHASE 3 - ADVANCED FEATURES
// ========================================

// AI and Analytics
model AIAnalysis {
  id               String    @id @default(cuid())
  leadId           String    @unique
  sentimentScore   Float
  sentiment        String    // Sentiment: POSITIVE, NEUTRAL, NEGATIVE
  urgencyLevel     String    // UrgencyLevel: LOW, MEDIUM, HIGH, CRITICAL
  confidenceScore  Float
  keyTopics        String    // JSON array
  recommendations  String    // JSON array of recommendations
  lastAnalyzed     DateTime  @default(now())

  lead             Lead      @relation(fields: [leadId], references: [id], onDelete: Cascade)

  @@map("ai_analyses")
}

model ConversionPrediction {
  id                          String   @id @default(cuid())
  leadId                      String
  probability                 Float
  confidence                  Float
  estimatedTimeToConversion   Int
  factors                     String   // JSON array of factors
  suggestedActions           String   // JSON array of actions
  lastUpdated                DateTime @default(now())

  lead                        Lead     @relation(fields: [leadId], references: [id], onDelete: Cascade)

  @@map("conversion_predictions")
}

model DuplicateDetection {
  id                  String              @id @default(cuid())
  leadId              String
  potentialDuplicates String              // JSON array of potential duplicates
  confidence          Float
  status              String              @default("PENDING") // DuplicateStatus: PENDING, CONFIRMED, DISMISSED
  resolvedAt          DateTime?
  resolvedBy          String?
  createdAt           DateTime            @default(now())

  lead                Lead                @relation(fields: [leadId], references: [id], onDelete: Cascade)

  @@map("duplicate_detections")
}

// CRM and Pipeline
model Pipeline {
  id          String          @id @default(cuid())
  name        String
  description String?
  isDefault   Boolean         @default(false)
  businessType String
  createdAt   DateTime        @default(now())
  createdBy   String?

  stages      PipelineStage[]
  opportunities Opportunity[]

  @@map("pipelines")
}

model PipelineStage {
  id                String   @id @default(cuid())
  pipelineId        String
  name              String
  description       String?
  color             String
  order             Int
  automations       String   // JSON array of automation IDs
  expectedDuration  Int      // days
  conversionRate    Float    @default(0)
  isClosedWon       Boolean  @default(false)
  isClosedLost      Boolean  @default(false)

  pipeline          Pipeline @relation(fields: [pipelineId], references: [id], onDelete: Cascade)

  @@map("pipeline_stages")
}

model Opportunity {
  id                String    @id @default(cuid())
  title             String
  description       String?
  value             Float
  currency          String    @default("BRL")
  probability       Int
  expectedCloseDate DateTime
  actualCloseDate   DateTime?
  stage             String
  leadId            String
  pipelineId        String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  createdBy         String?
  assignedTo        String?

  lead              Lead      @relation(fields: [leadId], references: [id])
  pipeline          Pipeline  @relation(fields: [pipelineId], references: [id])
  activities        OpportunityActivity[]

  @@map("opportunities")
}

model Interaction {
  id           String           @id @default(cuid())
  leadId       String
  type         String           // InteractionType: CALL, EMAIL, MEETING, WHATSAPP, SMS, NOTE, TASK
  title        String
  description  String
  duration     Int?             // minutes
  outcome      String           // InteractionOutcome: SUCCESSFUL, NO_ANSWER, BUSY, CALLBACK_REQUESTED, NOT_INTERESTED, INTERESTED
  nextAction   String?
  nextActionDate DateTime?
  participants String           // JSON array of participant IDs
  createdAt    DateTime         @default(now())
  createdBy    String?

  lead         Lead             @relation(fields: [leadId], references: [id], onDelete: Cascade)
  files        InteractionFile[]

  @@map("interactions")
}

model InteractionFile {
  id            String      @id @default(cuid())
  interactionId String
  name          String
  url           String
  type          String
  size          Int
  uploadedAt    DateTime    @default(now())

  interaction   Interaction @relation(fields: [interactionId], references: [id], onDelete: Cascade)

  @@map("interaction_files")
}

// User Management
model User {
  id          String      @id @default(cuid())
  email       String      @unique
  name        String
  password    String
  isActive    Boolean     @default(true)
  roleId      String
  avatar      String?
  lastLogin   DateTime?
  preferences String      // JSON object
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  role        UserRole    @relation(fields: [roleId], references: [id])
  sessions    Session[]
  auditLogs   AuditLog[]
  signatures  DigitalSignature[]
  teamMembers TeamMember[]

  @@map("users")
}

model UserRole {
  id              String    @id @default(cuid())
  name            String    @unique
  description     String?
  level           Int
  permissions     String    // JSON array of permissions
  canCreateUsers  Boolean   @default(false)
  canManageRoles  Boolean   @default(false)
  canViewAuditLogs Boolean  @default(false)
  createdAt       DateTime  @default(now())

  users           User[]

  @@map("user_roles")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model AuditLog {
  id           String   @id @default(cuid())
  userId       String?
  userName     String
  action       String
  resource     String
  resourceId   String?
  details      String   // JSON object
  ipAddress    String
  userAgent    String
  timestamp    DateTime @default(now())
  success      Boolean

  user         User?    @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

model DigitalSignature {
  id            String    @id @default(cuid())
  userId        String
  leadId        String
  documentType  String
  signatureData String    // base64 encoded signature
  timestamp     DateTime  @default(now())
  ipAddress     String
  isValid       Boolean   @default(true)
  certificateId String?

  user          User      @relation(fields: [userId], references: [id])

  @@map("digital_signatures")
}

model Team {
  id          String       @id @default(cuid())
  name        String
  description String?
  leadUserId  String
  permissions String       // JSON array of team permissions
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())

  members     TeamMember[]

  @@map("teams")
}

model TeamMember {
  userId    String
  teamId    String
  role      String    @default("member")
  joinedAt  DateTime  @default(now())

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  team      Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@id([userId, teamId])
  @@map("team_members")
}

// External Integrations
model Integration {
  id          String           @id @default(cuid())
  name        String
  type        String           // IntegrationType: ZAPIER, MAKE, GOOGLE_ANALYTICS, FACEBOOK_ADS, INSTAGRAM_ADS, HUBSPOT, PIPEDRIVE, MAILCHIMP, CUSTOM
  isEnabled   Boolean          @default(true)
  config      String           // JSON configuration
  credentials String           // Encrypted JSON credentials
  lastSync    DateTime?
  syncStatus  String           @default("DISABLED") // SyncStatus: SUCCESS, ERROR, PENDING, DISABLED
  errorMessage String?
  createdAt   DateTime         @default(now())
  createdBy   String?

  @@map("integrations")
}

// ========================================
// FASE 3: MODELOS ADICIONAIS
// ========================================

model LeadScoring {
  id              String   @id @default(cuid())
  leadId          String   @unique
  totalScore      Int      @default(0)
  demographicScore Int     @default(0)
  behaviorScore   Int      @default(0)
  engagementScore Int      @default(0)
  sourceScore     Int      @default(0)
  factors         String   // JSON object with scoring breakdown
  lastUpdated     DateTime @default(now())

  lead            Lead     @relation(fields: [leadId], references: [id])

  @@map("lead_scoring")
}

model OpportunityActivity {
  id            String      @id @default(cuid())
  opportunityId String
  type          String      // STAGE_CHANGED, VALUE_UPDATED, NOTE_ADDED, etc.
  description   String
  previousValue String?     // JSON of previous state
  newValue      String?     // JSON of new state
  createdAt     DateTime    @default(now())
  createdBy     String?

  opportunity   Opportunity @relation(fields: [opportunityId], references: [id])

  @@map("opportunity_activities")
}

model ForecastReport {
  id            String   @id @default(cuid())
  period        String   // MONTHLY, QUARTERLY, YEARLY
  startDate     DateTime
  endDate       DateTime
  totalValue    Float
  weightedValue Float
  closedValue   Float
  lostValue     Float
  pipelineValue Float
  opportunityCount Int
  data          String   // JSON detailed forecast data
  generatedAt   DateTime @default(now())
  generatedBy   String?

  @@map("forecast_reports")
}

model Webhook {
  id          String   @id @default(cuid())
  name        String
  url         String
  events      String   // JSON array of subscribed events
  isActive    Boolean  @default(true)
  secret      String?  // For webhook signature verification
  headers     String?  // JSON object of custom headers
  retryPolicy String   // JSON retry configuration
  createdAt   DateTime @default(now())
  createdBy   String?

  deliveries  WebhookDelivery[]

  @@map("webhooks")
}

model WebhookDelivery {
  id            String   @id @default(cuid())
  webhookId     String
  event         String   // Event that triggered the webhook
  payload       String   // JSON payload sent
  status        String   // SUCCESS, FAILED, PENDING, RETRY
  httpStatus    Int?     // HTTP response status
  response      String?  // Response body
  attemptCount  Int      @default(1)
  nextRetry     DateTime?
  deliveredAt   DateTime @default(now())

  webhook       Webhook  @relation(fields: [webhookId], references: [id])

  @@map("webhook_deliveries")
}

model BackgroundJob {
  id          String   @id @default(cuid())
  type        String   // JOB_TYPE: EMAIL_CAMPAIGN, AI_ANALYSIS, DATA_EXPORT, etc.
  name        String
  data        String   // JSON job data
  status      String   @default("PENDING") // PENDING, RUNNING, COMPLETED, FAILED
  priority    Int      @default(1) // 1=highest, 10=lowest
  attempts    Int      @default(0)
  maxAttempts Int      @default(3)
  result      String?  // JSON result data
  error       String?  // Error message if failed
  scheduledAt DateTime?
  startedAt   DateTime?
  completedAt DateTime?
  createdAt   DateTime @default(now())
  createdBy   String?

  @@map("background_jobs")
}

// ========================================
// STRING ENUM VALUES (SQLite Compatible)
// ========================================

// LeadStatus: "NOVO", "EM_ANDAMENTO", "CONCLUIDO"
// Priority: "LOW", "MEDIUM", "HIGH"
// CommunicationType: "WHATSAPP", "EMAIL", "SMS", "CALL", "NOTE"
// CommunicationStatus: "PENDING", "SENT", "DELIVERED", "FAILED", "CANCELLED"
// ExecutionStatus: "PENDING", "RUNNING", "SUCCESS", "FAILED", "CANCELLED"
// ReportType: "DASHBOARD", "LEADS", "CONVERSION", "PERFORMANCE", "ANALYTICS", "CUSTOM"
// Sentiment: "POSITIVE", "NEUTRAL", "NEGATIVE"
// UrgencyLevel: "LOW", "MEDIUM", "HIGH", "CRITICAL"
// DuplicateStatus: "PENDING", "CONFIRMED", "DISMISSED"
// InteractionType: "CALL", "EMAIL", "MEETING", "WHATSAPP", "SMS", "NOTE", "TASK"
// InteractionOutcome: "SUCCESSFUL", "NO_ANSWER", "BUSY", "CALLBACK_REQUESTED", "NOT_INTERESTED", "INTERESTED"
// IntegrationType: "ZAPIER", "MAKE", "GOOGLE_ANALYTICS", "FACEBOOK_ADS", "INSTAGRAM_ADS", "HUBSPOT", "PIPEDRIVE", "MAILCHIMP", "CUSTOM"
// SyncStatus: "SUCCESS", "ERROR", "PENDING", "DISABLED"